******************** Getting started*****************
1 Installing our project :- use common css as a bolierplet
------------------------
style.css
---------
* {
  box-sizing: border-box;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  font: 300 15px/1.4 -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica,
    Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
}

html,
body {
  height: 100%;
  margin: 0;
  padding: 0;
  background: #fff;
  -webkit-font-smoothing: antialiased;
  color: #545e6f;
}

img {
  vertical-align: bottom;
}
img a {
  border: 0;
}
ul,
ol {
  list-style: none;
  margin: 0;
  padding: 0;
}
a {
  color: #9f72e6;
  text-decoration: none;
}
input,
button {
  outline: 0;
}
input {
  border: none;
  background: #fff;
  font-size: 13px;
  padding: 6px 30px 6px 10px;
  border-radius: 1px;
  box-shadow: 1px 1px 3px 1px #ccc;
  border: 1px solid #eee;
}
button {
  cursor: pointer;
  background: #9f72e6;
  border: 0;
  border-radius: 2px;
  padding: 5px 10px;
  text-align: center;
  color: #fff;
}
p {
  margin: 5px 0;
}

body {
  padding: 50px;
}

h3 {
  font-size: 22px;
  font-weight: 400;
  margin: 0;
}
h4 {
  font-size: 18px;
  font-weight: 300;
  margin: 0;
}


2 First component with @Component
==============================

app.component.ts
----------------
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div class="app">
      {{ title }}
    </div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {
  title: string;
  constructor() {
    this.title = 'Awesome Angular';
  }
}



3 Root module with @NgModule
=============================
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppComponent } from './app.component';

@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule],
  providers: [],
  bootstrap: [AppComponent],
})
export class AppModule {}

4 Bootstrapping Angular and steps of bootstraping application
======================
main.ts
------
import { enableProdMode } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';
import { environment } from './environments/environment';

if (environment.production) {
  enableProdMode();
}

platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));



********************** Template fundamentals******************
You can access , javascript variable and expresion in the template using {{}} interpolation.
1 interpolation-expressions
=========================
app.component.ts
----------------
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div class="app">
      <div>{{ title }}</div>
      <div>{{ title + '!' }}</div>
      <div>{{ numberOne }} {{ numberTwo }}</div>
      <div>
        {{ numberOne + numberTwo }}
      </div>
      <div>
        {{ isHappy ? ':)' : ':(' }}
      </div>
    </div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {
  title: string;
  isHappy: boolean = false;
  numberOne: number = 1;
  numberTwo: number = 2;
  constructor() {
    this.title = 'Awwsome Angular';
  }
}

2 property-binding
=================
we know in html element we write the attribute, and same element we see in javascript they are object , where all the attribute property are mapped with any property , so angular gives power we can set any property uisng [] syntax.

[anyvalidDomProperty]="variableName or expression"

this is the same like whicjh we do in JS 
document.querySelecto(element).anyvalidDomProperty = "value"

app.component.ts
----------------
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div class="app">
      <h1 [innerHTML]="title"></h1>
      <!-- document.QuerySelector(h1).innerHtml = "title" -->
      <h1>{{ title }}</h1>
      <!--  document.QuerySelector(src).innerHtml = "title"  -->
      <input type="text" [value]="name" />
      <!--  document.QuerySelector(input).value = "title" -->
      <div>{{ name }}</div>
    </div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {
  title: string;
  name: string = 'sarang';
  constructor() {
    this.title = 'Awesome Angular';
  }
}

3 event-binding
=================
we know in each html element we have action or event like onCLick , onFocus , onInput , onChange etc etc, angular give the flexibilty to register the eventhandler in template onl.
app.component.ts
----------------
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div class="app">
      <button (click)="handleClick()">Change name</button>
      <input
        type="text"
        [value]="name"
        (input)="handleInput($event)"
        (blur)="handleBlur($event)"
      />
      <div>{{ name }}</div>
    </div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {
  name: string = 'sarang';
  handleClick() {
    this.name = 'jain';
  }
  handleInput(event: any) {
    this.name = event.target.value;
  }
  handleBlur(event: any) {
    this.name = event.target.value;
  }
}

4 two-way-binding
=================
[ngModel] and [ngModelChange] both are directive which is coming from  formModule and they are equillent to value and input event .

so the benifit is we can combine as well and achive two way data binding.

[(ngModel)]="variablename"

app.component.ts
----------------
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div class="app">
      <button (click)="handleClick()">Change name</button>
      <br />
      <input
        type="text"
        [ngModel]="name"
        (ngModelChange)="handleChange($event)"
      />
      <input type="text" [(ngModel)]="name" />
      <div>{{ name }}</div>
    </div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {
  name: string = 'sarang';
  handleClick() {
    this.name = 'Jain';
  }
  handleChange(value: string) {
    this.name = value;
  }
}

/*
 ngModel and ngModelChange are directive which is created by FormsModule , so import it for this functionality
*/

app.module.ts
----------------
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';  <----- added FormsModule
import { BrowserModule } from '@angular/platform-browser';   

import { AppComponent } from './app.component';

@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, FormsModule],   <----- added FormsModule
  providers: [],
  bootstrap: [AppComponent],
})
export class AppModule {}


5 template-refs
================
we can make any element refrnce in template , and we can use anywhere in template and can send it
<p  #mypelement>hello</p>

mypelement is equillent like, how we do in js
document.querySelector(p);


import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div class="app">
      <button (click)="handleClick(username.value)">Get value</button>
      <input type="text" #username />
      <div>{{ name }}</div>
    </div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {
  name: string = 'sarangs';
  handleClick(value: string) {
    console.log(value);
    this.name = value;
  }
}

************************ Rendering flows****************
app.component.ts
----------------
ngIf , and ngFor are the directive which is wrapped upon <ng-template></ng-template> in actual and give the functionality of structrul change , and we use suger syntax of them *ngIf, and *ngFor

*ngIf="expressionfir truthyfalsy"
*ngFor="let of item of array"

1 ng-if
=========

import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div class="app">
      <input type="text" [value]="name" (input)="handleChange($event)" />
    </div>

    <div *ngIf="name.length > 2">Searching for... {{ name }}</div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {
  name: string = '';
  handleChange(event: any) {
    this.name = event.target.value;
  }
}


2 ngFor and iterating collections
==================================
app.component.ts
----------------
import { Component } from '@angular/core';

interface Passenger {
  id: number;
  fullname: string;
  checkedIn: boolean;
}

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div class="app">
      <h3>Airline Passengers</h3>
      <ul>
        <li *ngFor="let passenger of passengers; let i = index">
          {{ i }}: {{ passenger.fullname }}
        </li>
      </ul>
    </div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {
  passengers: Passenger[] = [
    {
      id: 1,
      fullname: 'Stephen',
      checkedIn: true,
    },
    {
      id: 2,
      fullname: 'Rose',
      checkedIn: false,
    },
    {
      id: 3,
      fullname: 'James',
      checkedIn: true,
    },
    {
      id: 4,
      fullname: 'Louise',
      checkedIn: true,
    },
    {
      id: 5,
      fullname: 'Tina',
      checkedIn: false,
    },
  ];
}

3 ngClass and className bindings
================================
ðŸ“¢ This [class] syntax is actually part of Angularâ€™s NgClass directive, through @Input('class'). its not a dom property binding. 

app.component.css
----------------
.app {
}
.status {
  width: 10px;
  height: 10px;
  background: #c0392b;
  display: block;
  margin: 8px 10px 0 0;
  float: left;
  border-radius: 50%;
}
.status.checked-in {
  background: #2ecc71;
}

app.component.ts
----------------
import { Component } from '@angular/core';

interface Passenger {
  id: number;
  fullname: string;
  checkedIn: boolean;
}

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div class="app">
      <h3>Airline Passengers</h3>
      <ul>
        <li *ngFor="let passenger of passengers; let i = index">
          <span
            class="status"
            [ngClass]="{
              'checked-in': passenger.checkedIn,
              'checked-out': !passenger.checkedIn
            }"
          ></span>
          {{ i }}: {{ passenger.fullname }}
        </li>
      </ul>

      <h3>Airline Passengers</h3>
      <ul>
        <li *ngFor="let passenger of passengers; let i = index">
          <span class="status" [class.checked-in]="passenger.checkedIn"></span>
          {{ i }}: {{ passenger.fullname }}
        </li>
      </ul>
    </div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {
  passengers: Passenger[] = [
    {
      id: 1,
      fullname: 'Stephen',
      checkedIn: true,
    },
    {
      id: 2,
      fullname: 'Rose',
      checkedIn: false,
    },
    {
      id: 3,
      fullname: 'James',
      checkedIn: true,
    },
    {
      id: 4,
      fullname: 'Louise',
      checkedIn: true,
    },
    {
      id: 5,
      fullname: 'Tina',
      checkedIn: false,
    },
  ];
}

4 ngStyle and style bindings
=============================
app.component.ts
----------------

import { Component } from '@angular/core';

interface Passenger {
  id: number;
  fullname: string;
  checkedIn: boolean;
}

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div class="app">
      <h3>Airline Passengers</h3>
      <ul>
        <li *ngFor="let passenger of passengers; let i = index">
          <span
            class="status"
            [ngClass]="{
              'checked-in': passenger.checkedIn,
              'checked-out': !passenger.checkedIn
            }"
          ></span>
          {{ i }}: {{ passenger.fullname }}
        </li>
      </ul>

      <h3>Airline Passengers</h3>
      <ul>
        <li *ngFor="let passenger of passengers; let i = index">
          <span class="status" [class.checked-in]="passenger.checkedIn"></span>
          {{ i }}: {{ passenger.fullname }}
        </li>
      </ul>

      <h3>Airline Passengers</h3>
      <ul>
        <li *ngFor="let passenger of passengers; let i = index">
          <span
            class="status"
            [style.background]="passenger.checkedIn ? '#2ecc71' : '#c0392b'"
          ></span>
          {{ i }}: {{ passenger.fullname }}
        </li>
      </ul>

      <h3>Airline Passengers</h3>
      <ul>
        <li *ngFor="let passenger of passengers; let i = index">
          <span
            class="status"
            [ngStyle]="{
              background: passenger.checkedIn ? '#2ecc71' : '#c0392b'
            }"
          ></span>
          {{ i }}: {{ passenger.fullname }}
        </li>
      </ul>
    </div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {
  passengers: Passenger[] = [
    {
      id: 1,
      fullname: 'Stephen',
      checkedIn: true,
    },
    {
      id: 2,
      fullname: 'Rose',
      checkedIn: false,
    },
    {
      id: 3,
      fullname: 'James',
      checkedIn: true,
    },
    {
      id: 4,
      fullname: 'Louise',
      checkedIn: true,
    },
    {
      id: 5,
      fullname: 'Tina',
      checkedIn: false,
    },
  ];
}

you dont have to handle classname and style attribute in javascript , angular will help you to achive the same in the template only so you have two directive 

[ngClass]="{claas1 : expresion , claas2 : expresion2}"
[class.background]="expresion"  
// here [class] is not a dom property its a part of [ngClass] directive because in dom we call className for class attribute

[ngStyle]="{color : expresion , background : expresion2}" 
[style.color]="expresion" 

here ngStyle is a directive where we can set multiple style dynamically , and [style] is our dom property , which we are binding there.

then wyou can ask what is the diffrence between [style] and [ngStyle]

[ngStyle] is an Angular directive that gives you the flexibility to do this, where as [style] is a regular HTML property to which you can only bind values one by one. Thatâ€™s the difference between the two of them.

for example 

<div [style.color]="hasError ? 'red' : 'black' " [style.font]="font"  [style.background-color]="hasError ? 'tomato' : 'white' ">
   The phone number you entered does not match the expected format
</div>

<div [ngStyle]="{     
       'font-style':  this.canSave  ? 'italic' : 'normal',  
       'color':       this.hasError ? 'red'   : 'black',     
       'font-size':   this.hasError ? '24px'   : '12px'   
}">
   The phone number you entered does not match the expected format 
</div>


5 Pipes for data transformation
===============================
pipe is data transformation mechansim , these are function which angular running for us e for to do some kind of data transformation 

app.component.ts
----------------

import { Component } from '@angular/core';

interface Passenger {
  id: number;
  fullname: string;
  checkedIn: boolean;
  checkInDate: number | null;
}

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div class="app">
      <h3>Airline Passengers</h3>
      <ul>
        <li *ngFor="let passenger of passengers; let i = index">
          <span class="status" [class.checked-in]="passenger.checkedIn"></span>
          {{ i }}: {{ passenger.fullname }}
          <p>{{ passenger | json }}</p>
          <div class="data">
            {{
              passenger.checkInDate
                ? (passenger.checkInDate | date: 'yMMMMd' | uppercase)
                : 'not checked in'
            }}
          </div>
        </li>
      </ul>
    </div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {
  passengers: Passenger[] = [
    {
      id: 1,
      fullname: 'Stephen',
      checkedIn: true,
      checkInDate: 1490742000000,
    },
    {
      id: 2,
      fullname: 'Rose',
      checkedIn: false,
      checkInDate: null,
    },
    {
      id: 3,
      fullname: 'James',
      checkedIn: true,
      checkInDate: 1491606000000,
    },
    {
      id: 4,
      fullname: 'Louise',
      checkedIn: true,
      checkInDate: 1488412800000,
    },
    {
      id: 5,
      fullname: 'Tina',
      checkedIn: false,
      checkInDate: null,
    },
  ];
}


6 safe-navigation
==================
app.component.ts
----------------
import { Component } from '@angular/core';

interface Child {
  name: string;
  age: number;
}

interface Passenger {
  id: number;
  fullname: string;
  checkedIn: boolean;
  checkInDate: number | null;
  children: Child[] | null;
}

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div class="app">
      <h3>Airline Passengers</h3>
      <ul>
        <li *ngFor="let passenger of passengers; let i = index">
          <span class="status" [class.checked-in]="passenger.checkedIn"></span>
          {{ i }}: {{ passenger.fullname }}
          <p>{{ passenger | json }}</p>
          <div class="data">
            {{
              passenger.checkInDate
                ? (passenger.checkInDate | date: 'yMMMMd' | uppercase)
                : 'not checked in'
            }}
          </div>
          <div class="children">
            Children:{{ passenger.children?.length || 0 }}
          </div>
        </li>
      </ul>
    </div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {
  passengers: Passenger[] = [
    {
      id: 1,
      fullname: 'Stephen',
      checkedIn: true,
      checkInDate: 1490742000000,
      children: null,
    },
    {
      id: 2,
      fullname: 'Rose',
      checkedIn: false,
      checkInDate: null,
      children: [
        { name: 'Ted', age: 12 },
        { name: 'Chloe', age: 7 },
      ],
    },
    {
      id: 3,
      fullname: 'James',
      checkedIn: true,
      checkInDate: 1491606000000,
      children: null,
    },
    {
      id: 4,
      fullname: 'Louise',
      checkedIn: true,
      checkInDate: 1488412800000,
      children: [{ name: 'Jessica', age: 1 }],
    },
    {
      id: 5,
      fullname: 'Tina',
      checkedIn: false,
      checkInDate: null,
      children: null,
    },
  ];
}

****************** Component Architecture and Feature Modules ******************
1 Smart and dumb components overview
====================================
2 One-way dataflow overview
===========================

3 feature modules with @NgModule
===============================
first create feature module folder , and module file for feature folder
---> app/passenger-dashboard/passenger-dashboard.module.ts

passenger-dashboard.module.ts
------------------------------
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

@NgModule({
  declarations: [],
  imports: [BrowserModule],
})
export class PassengerDashboardModule {}

import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { BrowserModule } from '@angular/platform-browser';

app.module.ts
-------------
// custom component
import { AppComponent } from './app.component';
// custom module
import { PassengerDashboardModule } from './passenger-dashboard/passenger-dashboard.module'; <---- add thete

@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, FormsModule, PassengerDashboardModule], <---- add thete
  
  providers: [],
  bootstrap: [AppComponent],   
})
export class AppModule {}


4 Creating a container (smart) component
----------------------------------------
1) create a new container folder for smart component passenger-dashboard.component.ts
---> app/passenger-dashboard/container/passenger-dashboard/passenger-dashboard.component.ts
--->app/passenger-dashboard/container/passenger-dashboard/passenger-dashboard.component.css

2) create new folder for your model means for your interface
---> app/passenger-dashboard/container/passenger-dashboard/model/passesnger.interface.ts


passenger-dashboard.component.ts
-------------------------------
import { Component } from '@angular/core';
import { Passenger } from '../../models/passesnger.interface';

@Component({
  selector: 'passenger-dashboard',
  styleUrls: ['./passenger-dashboard.component.css'],
  template: `
    <div>
      <h3>Airline Passengers</h3>
      <ul>
        <li *ngFor="let passenger of passengers; let i = index">
          <span class="status" [class.checked-in]="passenger.checkedIn"></span>
          {{ i }}: {{ passenger.fullname }}
          <p>{{ passenger | json }}</p>
          <div class="data">
            {{
              passenger.checkInDate
                ? (passenger.checkInDate | date: 'yMMMMd' | uppercase)
                : 'not checked in'
            }}
          </div>
          <div class="children">
            Children:{{ passenger.children?.length || 0 }}
          </div>
        </li>
      </ul>
    </div>
  `,
})
export class PassengerDashboardComponent {
  passengers: Passenger[] = [
    {
      id: 1,
      fullname: 'Stephen',
      checkedIn: true,
      checkInDate: 1490742000000,
      children: null,
    },
    {
      id: 2,
      fullname: 'Rose',
      checkedIn: false,
      checkInDate: null,
      children: [
        { name: 'Ted', age: 12 },
        { name: 'Chloe', age: 7 },
      ],
    },
    {
      id: 3,
      fullname: 'James',
      checkedIn: true,
      checkInDate: 1491606000000,
      children: null,
    },
    {
      id: 4,
      fullname: 'Louise',
      checkedIn: true,
      checkInDate: 1488412800000,
      children: [{ name: 'Jessica', age: 1 }],
    },
    {
      id: 5,
      fullname: 'Tina',
      checkedIn: false,
      checkInDate: null,
      children: null,
    },
  ];
}



passenger-dashboard.module.ts
-----------------------------
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { PassengerDashboardComponent } from './container/passenger-dashboard/passenger-dashboard.component';

@NgModule({
  declarations: [PassengerDashboardComponent],  <---- Add here component
  imports: [BrowserModule],
  // add here component in exports , becasue from this feature module , only this component will talk outside , example in our app component
  exports: [PassengerDashboardComponent],   
})
export class PassengerDashboardModule {}  

passenger-dashboard.component.css
-------------------------------
moved all passenger related css from passenger app component to here.

.status {
  width: 10px;
  height: 10px;
  background: #c0392b;
  display: block;
  margin: 8px 10px 0 0;
  float: left;
  border-radius: 50%;
}
.status.checked-in {
  background: #2ecc71;
}

passesnger.interface.ts
------------------------
we creates seprate model folder for our interface so we are exporting from there , so we can access anywhere in our application

export interface Child {
  name: string;
  age: number;
}

export interface Passenger {
  id: number;
  fullname: string;
  checkedIn: boolean;
  checkInDate: number | null;
  children: Child[] | null;
}

app.component.ts
----------------
We have modified and cleaned the app component and refering  <passenger-dashboard> tag inside appcomponent. and move all code passenger related to passenger dashboard module 

import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div class="app">
      <passenger-dashboard></passenger-dashboard>    
    </div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {}


5 ngOnInit lifecycle hook
==========================
ngOninint is the first life cycle hooks or function which is run by angular when your component mounted or initilized.

import { Component, OnInit } from '@angular/core';   <---- add here
import { Passenger } from '../../models/passesnger.interface';

@Component({
  selector: 'passenger-dashboard',
  styleUrls: ['./passenger-dashboard.component.css'],
  template: `
    <div>
      <h3>Airline Passengers</h3>
      <ul>
        <li *ngFor="let passenger of passengers; let i = index">
          <span class="status" [class.checked-in]="passenger.checkedIn"></span>
          {{ i }}: {{ passenger.fullname }}
          <div class="data">
            {{
              passenger.checkInDate
                ? (passenger.checkInDate | date: 'yMMMMd' | uppercase)
                : 'not checked in'
            }}
          </div>
          <div class="children">
            Children:{{ passenger.children?.length || 0 }}
          </div>
        </li>
      </ul>
    </div>
  `,
})
export class PassengerDashboardComponent implements OnInit {
  passengers: Passenger[];
  constructor() {}

  ngOnInit() {                       <---- impelemnts here
    this.passengers = [
      {
        id: 1,
        fullname: 'Stephen',
        checkedIn: true,
        checkInDate: 1490742000000,
        children: null,
      },
      {
        id: 2,
        fullname: 'Rose',
        checkedIn: false,
        checkInDate: null,
        children: [
          { name: 'Ted', age: 12 },
          { name: 'Chloe', age: 7 },
        ],
      },
      {
        id: 3,
        fullname: 'James',
        checkedIn: true,
        checkInDate: 1491606000000,
        children: null,
      },
      {
        id: 4,
        fullname: 'Louise',
        checkedIn: true,
        checkInDate: 1488412800000,
        children: [{ name: 'Jessica', age: 1 }],
      },
      {
        id: 5,
        fullname: 'Tina',
        checkedIn: false,
        checkInDate: null,
        children: null,
      },
    ];
  }
}

6 setup Presentational (dumb) components
================================
Create a stateless/dumb component
create `components folder` for them and two folder for seprate componet inside `componets folder`.

app/passenger-dashboard/container/passenger-dashboard/components/passenger-count/passenger-count.component.ts
app/passenger-dashboard/container/passenger-dashboard/components/passenger-count/passenger-details.component.ts

passenger-count.component.ts
----------------------------
import { Component } from '@angular/core';

@Component({
  selector: 'passenger-count',
  template: ` <div>Count component</div> `,
})
export class PassengerCountComponent {}


passenger-details.component.ts
-------------------------------
import { Component } from '@angular/core';

@Component({
  selector: 'passenger-details',
  template: `<div>Details Component</div>`,
})
export class PassengerDetailsComponent {}


because we have created two seprate component we have to give the information to its module.

passenger-dashboard.module.ts
-------------------------------
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

// container component
import { PassengerDashboardComponent } from './container/passenger-dashboard/passenger-dashboard.component';

// Dumb component
import { PassengerCountComponent } from './components/passenger-count/passenger-count.component';
import { PassengerDetailsComponent } from './components/passenger-details/passenger-detail.component';

@NgModule({
  declarations: [
    PassengerDashboardComponent,
    PassengerDetailsComponent,          <--- added there
    PassengerCountComponent,   			<--- added there
  ], 
  imports: [BrowserModule],
  exports: [PassengerDashboardComponent],
})
export class PassengerDashboardModule {}


7 Passing data into components with @Input
==========================================
In previous chapter we have created own define tag, now we will create the our own property for our tag using @Input() decorators.

passenger-count.component.ts
----------------------------
import { Component, Input } from '@angular/core';
import { Passenger } from '../../models/passesnger.interface';

@Component({
  selector: 'passenger-count',
    template: `
    <div>
      <h3>Airline Passengers</h3>
      Total Checkedin: {{ checkedInCount() }} / {{ items.length }}
    </div>
  `,
})
export class PassengerCountComponent {
  @Input()
  items: Passenger[];   <-- You have created the property of your custom tag

  checkedInCount() {
    return this.items.filter((passenger) => passenger.checkedIn).length;
  }
}

passenger-dashboard.component.ts
-------------------------------
import { Component, OnInit } from '@angular/core';
import { Passenger } from '../../models/passesnger.interface';

@Component({
  selector: 'passenger-dashboard',
  styleUrls: ['./passenger-dashboard.component.css'],
  template: `
    <div>
      <h3>Airline Passengers</h3>
      <passenger-count [items]="passengers"></passenger-count>    <-- You have bind [items] property here
      <passenger-details></passenger-details>
      <ul>
        <li *ngFor="let passenger of passengers; let i = index">
          <span class="status" [class.checked-in]="passenger.checkedIn"></span>
          {{ i }}: {{ passenger.fullname }}
          <div class="data">
            {{
              passenger.checkInDate
                ? (passenger.checkInDate | date: 'yMMMMd' | uppercase)
                : 'not checked in'
            }}
          </div>
          <div class="children">
            Children:{{ passenger.children?.length || 0 }}
          </div>
        </li>
      </ul>
    </div>
  `,
})
export class PassengerDashboardComponent implements OnInit {
  passengers: Passenger[];
  constructor() {}

  ngOnInit() {
    this.passengers = [
      {
        id: 1,
        fullname: 'Stephen',
        checkedIn: true,
        checkInDate: 1490742000000,
        children: null,
      },
      {
        id: 2,
        fullname: 'Rose',
        checkedIn: false,
        checkInDate: null,
        children: [
          { name: 'Ted', age: 12 },
          { name: 'Chloe', age: 7 },
        ],
      },
      {
        id: 3,
        fullname: 'James',
        checkedIn: true,
        checkInDate: 1491606000000,
        children: null,
      },
      {
        id: 4,
        fullname: 'Louise',
        checkedIn: true,
        checkInDate: 1488412800000,
        children: [{ name: 'Jessica', age: 1 }],
      },
      {
        id: 5,
        fullname: 'Tina',
        checkedIn: false,
        checkInDate: null,
        children: null,
      },
    ];
  }
}

8 dynamic-input-ngfor 
==========================
we can apply ngFor with component as well , and now we are going to implement custom detail property for passenger-details component, and we will apply ng-for , with cusom component.

create a new css file for  passenger-detail.component.ts (passenger-detail.component.css), becasue now we have to move css from passenger-dashboard.component.ts to passenger-detail.component.ts 


passenger-detail.component.ts
-----------------------------
import { Component, Input } from '@angular/core';
import { Passenger } from '../../models/passesnger.interface';

@Component({
  selector: 'passenger-details',
  styleUrls: ['./passenger-detail.component.css'],
  template: `<div>
    <span class="status" [class.checked-in]="detail.checkedIn"></span>
    {{ detail.fullname }}
    <div class="data">
      {{
        detail.checkInDate
          ? (detail.checkInDate | date: 'yMMMMd' | uppercase)
          : 'not checked in'
      }}
    </div>
    <div class="children">Children:{{ detail.children?.length || 0 }}</div>
  </div>`,
})
export class PassengerDetailsComponent {
  @Input()              
  detail: Passenger;    <----- custom detail property created for <passenger-details> tag.



passenger-dashboard.component.ts
----------------------------------
import { Component, OnInit } from '@angular/core';
import { Passenger } from '../../models/passesnger.interface';

@Component({
  selector: 'passenger-dashboard',
  styleUrls: ['./passenger-dashboard.component.css'],
  template: `
    <div>
      <passenger-count [items]="passengers"></passenger-count>
      <passenger-details
        *ngFor="let passenger of passengers"              <----- dunamic input property with ngFOr
        [detail]="passenger"
      ></passenger-details>
    </div>
  `,
})
export class PassengerDashboardComponent implements OnInit {
  passengers: Passenger[];
  constructor() {}

  ngOnInit() {
    this.passengers = [
      {
        id: 1,
        fullname: 'Stephen',
        checkedIn: true,
        checkInDate: 1490742000000,
        children: null,
      },
      {
        id: 2,
        fullname: 'Rose',
        checkedIn: false,
        checkInDate: null,
        children: [
          { name: 'Ted', age: 12 },
          { name: 'Chloe', age: 7 },
        ],
      },
      {
        id: 3,
        fullname: 'James',
        checkedIn: true,
        checkInDate: 1491606000000,
        children: null,
      },
      {
        id: 4,
        fullname: 'Louise',
        checkedIn: true,
        checkInDate: 1488412800000,
        children: [{ name: 'Jessica', age: 1 }],
      },
      {
        id: 5,
        fullname: 'Tina',
        checkedIn: false,
        checkInDate: null,
        children: null,
      },
    ];
  }
}


passenger-detail.component.css
----------------------------------
.status {
  width: 10px;
  height: 10px;
  background: #c0392b;
  display: block;
  margin: 8px 10px 0 0;
  float: left;
  border-radius: 50%;
}
.status.checked-in {
  background: #2ecc71;
}
