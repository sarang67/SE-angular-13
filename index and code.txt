******************** Getting started*****************
1 Installing our project :- use common css as a bolierplet
------------------------
style.css
---------
* {
  box-sizing: border-box;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  font: 300 15px/1.4 -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica,
    Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
}

html,
body {
  height: 100%;
  margin: 0;
  padding: 0;
  background: #fff;
  -webkit-font-smoothing: antialiased;
  color: #545e6f;
}

img {
  vertical-align: bottom;
}
img a {
  border: 0;
}
ul,
ol {
  list-style: none;
  margin: 0;
  padding: 0;
}
a {
  color: #9f72e6;
  text-decoration: none;
}
input,
button {
  outline: 0;
}
input {
  border: none;
  background: #fff;
  font-size: 13px;
  padding: 6px 30px 6px 10px;
  border-radius: 1px;
  box-shadow: 1px 1px 3px 1px #ccc;
  border: 1px solid #eee;
}
button {
  cursor: pointer;
  background: #9f72e6;
  border: 0;
  border-radius: 2px;
  padding: 5px 10px;
  text-align: center;
  color: #fff;
}
p {
  margin: 5px 0;
}

body {
  padding: 50px;
}

h3 {
  font-size: 22px;
  font-weight: 400;
  margin: 0;
}
h4 {
  font-size: 18px;
  font-weight: 300;
  margin: 0;
}


2 First component with @Component
==============================

app.component.ts
----------------
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div class="app">
      {{ title }}
    </div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {
  title: string;
  constructor() {
    this.title = 'Awesome Angular';
  }
}



3 Root module with @NgModule
=============================
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppComponent } from './app.component';

@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule],
  providers: [],
  bootstrap: [AppComponent],
})
export class AppModule {}

4 Bootstrapping Angular and steps of bootstraping application
======================
main.ts
------
import { enableProdMode } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';
import { environment } from './environments/environment';

if (environment.production) {
  enableProdMode();
}

platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));



********************** Template fundamentals******************
You can access , javascript variable and expresion in the template using {{}} interpolation.
1 interpolation-expressions
=========================
app.component.ts
----------------
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div class="app">
      <div>{{ title }}</div>
      <div>{{ title + '!' }}</div>
      <div>{{ numberOne }} {{ numberTwo }}</div>
      <div>
        {{ numberOne + numberTwo }}
      </div>
      <div>
        {{ isHappy ? ':)' : ':(' }}
      </div>
    </div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {
  title: string;
  isHappy: boolean = false;
  numberOne: number = 1;
  numberTwo: number = 2;
  constructor() {
    this.title = 'Awwsome Angular';
  }
}

2 property-binding
=================
we know in html element we write the attribute, and same element we see in javascript they are object , where all the attribute property are mapped with any property , so angular gives power we can set any property uisng [] syntax.

[anyvalidDomProperty]="variableName or expression"

this is the same like whicjh we do in JS 
document.querySelecto(element).anyvalidDomProperty = "value"

app.component.ts
----------------
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div class="app">
      <h1 [innerHTML]="title"></h1>
      <!-- document.QuerySelector(h1).innerHtml = "title" -->
      <h1>{{ title }}</h1>
      <!--  document.QuerySelector(src).innerHtml = "title"  -->
      <input type="text" [value]="name" />
      <!--  document.QuerySelector(input).value = "title" -->
      <div>{{ name }}</div>
    </div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {
  title: string;
  name: string = 'sarang';
  constructor() {
    this.title = 'Awesome Angular';
  }
}

3 event-binding
=================
we know in each html element we have action or event like onCLick , onFocus , onInput , onChange etc etc, angular give the flexibilty to register the eventhandler in template onl.
app.component.ts
----------------
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div class="app">
      <button (click)="handleClick()">Change name</button>
      <input
        type="text"
        [value]="name"
        (input)="handleInput($event)"
        (blur)="handleBlur($event)"
      />
      <div>{{ name }}</div>
    </div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {
  name: string = 'sarang';
  handleClick() {
    this.name = 'jain';
  }
  handleInput(event: any) {
    this.name = event.target.value;
  }
  handleBlur(event: any) {
    this.name = event.target.value;
  }
}

4 two-way-binding
=================
[ngModel] and [ngModelChange] both are directive which is coming from  formModule and they are equillent to value and input event .

so the benifit is we can combine as well and achive two way data binding.

[(ngModel)]="variablename"

app.component.ts
----------------
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div class="app">
      <button (click)="handleClick()">Change name</button>
      <br />
      <input
        type="text"
        [ngModel]="name"
        (ngModelChange)="handleChange($event)"
      />
      <input type="text" [(ngModel)]="name" />
      <div>{{ name }}</div>
    </div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {
  name: string = 'sarang';
  handleClick() {
    this.name = 'Jain';
  }
  handleChange(value: string) {
    this.name = value;
  }
}

/*
 ngModel and ngModelChange are directive which is created by FormsModule , so import it for this functionality
*/

app.module.ts
----------------
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';  <----- added FormsModule
import { BrowserModule } from '@angular/platform-browser';   

import { AppComponent } from './app.component';

@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, FormsModule],   <----- added FormsModule
  providers: [],
  bootstrap: [AppComponent],
})
export class AppModule {}


5 template-refs
================
we can make any element refrnce in template , and we can use anywhere in template and can send it
<p  #mypelement>hello</p>

mypelement is equillent like, how we do in js
document.querySelector(p);


import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div class="app">
      <button (click)="handleClick(username.value)">Get value</button>
      <input type="text" #username />
      <div>{{ name }}</div>
    </div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {
  name: string = 'sarangs';
  handleClick(value: string) {
    console.log(value);
    this.name = value;
  }
}

************************ Rendering flows****************
app.component.ts
----------------
ngIf , and ngFor are the directive which is wrapped upon <ng-template></ng-template> in actual and give the functionality of structrul change , and we use suger syntax of them *ngIf, and *ngFor

*ngIf="expressionfir truthyfalsy"
*ngFor="let of item of array"

1 ng-if
=========

import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div class="app">
      <input type="text" [value]="name" (input)="handleChange($event)" />
    </div>

    <div *ngIf="name.length > 2">Searching for... {{ name }}</div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {
  name: string = '';
  handleChange(event: any) {
    this.name = event.target.value;
  }
}


2 ngFor and iterating collections
==================================
app.component.ts
----------------
import { Component } from '@angular/core';

interface Passenger {
  id: number;
  fullname: string;
  checkedIn: boolean;
}

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div class="app">
      <h3>Airline Passengers</h3>
      <ul>
        <li *ngFor="let passenger of passengers; let i = index">
          {{ i }}: {{ passenger.fullname }}
        </li>
      </ul>
    </div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {
  passengers: Passenger[] = [
    {
      id: 1,
      fullname: 'Stephen',
      checkedIn: true,
    },
    {
      id: 2,
      fullname: 'Rose',
      checkedIn: false,
    },
    {
      id: 3,
      fullname: 'James',
      checkedIn: true,
    },
    {
      id: 4,
      fullname: 'Louise',
      checkedIn: true,
    },
    {
      id: 5,
      fullname: 'Tina',
      checkedIn: false,
    },
  ];
}

3 ngClass and className bindings
================================
ðŸ“¢ This [class] syntax is actually part of Angularâ€™s NgClass directive, through @Input('class'). its not a dom property binding. 

app.component.css
----------------
.app {
}
.status {
  width: 10px;
  height: 10px;
  background: #c0392b;
  display: block;
  margin: 8px 10px 0 0;
  float: left;
  border-radius: 50%;
}
.status.checked-in {
  background: #2ecc71;
}

app.component.ts
----------------
import { Component } from '@angular/core';

interface Passenger {
  id: number;
  fullname: string;
  checkedIn: boolean;
}

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div class="app">
      <h3>Airline Passengers</h3>
      <ul>
        <li *ngFor="let passenger of passengers; let i = index">
          <span
            class="status"
            [ngClass]="{
              'checked-in': passenger.checkedIn,
              'checked-out': !passenger.checkedIn
            }"
          ></span>
          {{ i }}: {{ passenger.fullname }}
        </li>
      </ul>

      <h3>Airline Passengers</h3>
      <ul>
        <li *ngFor="let passenger of passengers; let i = index">
          <span class="status" [class.checked-in]="passenger.checkedIn"></span>
          {{ i }}: {{ passenger.fullname }}
        </li>
      </ul>
    </div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {
  passengers: Passenger[] = [
    {
      id: 1,
      fullname: 'Stephen',
      checkedIn: true,
    },
    {
      id: 2,
      fullname: 'Rose',
      checkedIn: false,
    },
    {
      id: 3,
      fullname: 'James',
      checkedIn: true,
    },
    {
      id: 4,
      fullname: 'Louise',
      checkedIn: true,
    },
    {
      id: 5,
      fullname: 'Tina',
      checkedIn: false,
    },
  ];
}

4 ngStyle and style bindings
=============================
app.component.ts
----------------

import { Component } from '@angular/core';

interface Passenger {
  id: number;
  fullname: string;
  checkedIn: boolean;
}

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div class="app">
      <h3>Airline Passengers</h3>
      <ul>
        <li *ngFor="let passenger of passengers; let i = index">
          <span
            class="status"
            [ngClass]="{
              'checked-in': passenger.checkedIn,
              'checked-out': !passenger.checkedIn
            }"
          ></span>
          {{ i }}: {{ passenger.fullname }}
        </li>
      </ul>

      <h3>Airline Passengers</h3>
      <ul>
        <li *ngFor="let passenger of passengers; let i = index">
          <span class="status" [class.checked-in]="passenger.checkedIn"></span>
          {{ i }}: {{ passenger.fullname }}
        </li>
      </ul>

      <h3>Airline Passengers</h3>
      <ul>
        <li *ngFor="let passenger of passengers; let i = index">
          <span
            class="status"
            [style.background]="passenger.checkedIn ? '#2ecc71' : '#c0392b'"
          ></span>
          {{ i }}: {{ passenger.fullname }}
        </li>
      </ul>

      <h3>Airline Passengers</h3>
      <ul>
        <li *ngFor="let passenger of passengers; let i = index">
          <span
            class="status"
            [ngStyle]="{
              background: passenger.checkedIn ? '#2ecc71' : '#c0392b'
            }"
          ></span>
          {{ i }}: {{ passenger.fullname }}
        </li>
      </ul>
    </div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {
  passengers: Passenger[] = [
    {
      id: 1,
      fullname: 'Stephen',
      checkedIn: true,
    },
    {
      id: 2,
      fullname: 'Rose',
      checkedIn: false,
    },
    {
      id: 3,
      fullname: 'James',
      checkedIn: true,
    },
    {
      id: 4,
      fullname: 'Louise',
      checkedIn: true,
    },
    {
      id: 5,
      fullname: 'Tina',
      checkedIn: false,
    },
  ];
}

you dont have to handle classname and style attribute in javascript , angular will help you to achive the same in the template only so you have two directive 

[ngClass]="{claas1 : expresion , claas2 : expresion2}"
[class.background]="expresion"  
// here [class] is not a dom property its a part of [ngClass] directive because in dom we call className for class attribute

[ngStyle]="{color : expresion , background : expresion2}" 
[style.color]="expresion" 

here ngStyle is a directive where we can set multiple style dynamically , and [style] is our dom property , which we are binding there.

then wyou can ask what is the diffrence between [style] and [ngStyle]

[ngStyle] is an Angular directive that gives you the flexibility to do this, where as [style] is a regular HTML property to which you can only bind values one by one. Thatâ€™s the difference between the two of them.

for example 

<div [style.color]="hasError ? 'red' : 'black' " [style.font]="font"  [style.background-color]="hasError ? 'tomato' : 'white' ">
   The phone number you entered does not match the expected format
</div>

<div [ngStyle]="{     
       'font-style':  this.canSave  ? 'italic' : 'normal',  
       'color':       this.hasError ? 'red'   : 'black',     
       'font-size':   this.hasError ? '24px'   : '12px'   
}">
   The phone number you entered does not match the expected format 
</div>


5 Pipes for data transformation
===============================
pipe is data transformation mechansim , these are function which angular running for us e for to do some kind of data transformation 

app.component.ts
----------------

import { Component } from '@angular/core';

interface Passenger {
  id: number;
  fullname: string;
  checkedIn: boolean;
  checkInDate: number | null;
}

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div class="app">
      <h3>Airline Passengers</h3>
      <ul>
        <li *ngFor="let passenger of passengers; let i = index">
          <span class="status" [class.checked-in]="passenger.checkedIn"></span>
          {{ i }}: {{ passenger.fullname }}
          <p>{{ passenger | json }}</p>
          <div class="data">
            {{
              passenger.checkInDate
                ? (passenger.checkInDate | date: 'yMMMMd':  | uppercase)
                : 'not checked in'
            }}
          </div>
        </li>
      </ul>
    </div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {
  
  passengers: Passenger[] = [
    {
      id: 1,
      fullname: 'Stephen',
      checkedIn: true,
      checkInDate: 1490742000000,
    },
    {
      id: 2,
      fullname: 'Rose',
      checkedIn: false,
      checkInDate: null,
    },
    {
      id: 3,
      fullname: 'James',
      checkedIn: true,
      checkInDate: 1491606000000,
    },
    {
      id: 4,
      fullname: 'Louise',
      checkedIn: true,
      checkInDate: 1488412800000,
    },
    {
      id: 5,
      fullname: 'Tina',
      checkedIn: false,
      checkInDate: null,
    },
  ];
}


6 safe-navigation
==================
app.component.ts
----------------
import { Component } from '@angular/core';

interface Child {
  name: string;
  age: number;
}

interface Passenger {
  id: number;
  fullname: string;
  checkedIn: boolean;
  checkInDate: number | null;
  children: Child[] | null;
}

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div class="app">
      <h3>Airline Passengers</h3>
      <ul>
        <li *ngFor="let passenger of passengers; let i = index">
          <span class="status" [class.checked-in]="passenger.checkedIn"></span>
          {{ i }}: {{ passenger.fullname }}
          <p>{{ passenger | json }}</p>
          <div class="data">
            {{
              passenger.checkInDate
                ? (passenger.checkInDate | date: 'yMMMMd' | uppercase)
                : 'not checked in'
            }}
          </div>
          <div class="children">
            Children:{{ passenger.children?.length || 0 }}
          </div>
        </li>
      </ul>
    </div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {
  passengers: Passenger[] = [
    {
      id: 1,
      fullname: 'Stephen',
      checkedIn: true,
      checkInDate: 1490742000000,
      children: null,
    },
    {
      id: 2,
      fullname: 'Rose',
      checkedIn: false,
      checkInDate: null,
      children: [
        { name: 'Ted', age: 12 },
        { name: 'Chloe', age: 7 },
      ],
    },
    {
      id: 3,
      fullname: 'James',
      checkedIn: true,
      checkInDate: 1491606000000,
      children: null,
    },
    {
      id: 4,
      fullname: 'Louise',
      checkedIn: true,
      checkInDate: 1488412800000,
      children: [{ name: 'Jessica', age: 1 }],
    },
    {
      id: 5,
      fullname: 'Tina',
      checkedIn: false,
      checkInDate: null,
      children: null,
    },
  ];
}

****************** Component Architecture and Feature Modules ******************
1 Smart and dumb components overview
====================================
2 One-way dataflow overview
===========================

3 feature modules with @NgModule
===============================
first create feature module folder , and module file for feature folder
---> app/passenger-dashboard/passenger-dashboard.module.ts

passenger-dashboard.module.ts
------------------------------
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

@NgModule({
  declarations: [],
  imports: [BrowserModule],
})
export class PassengerDashboardModule {}

import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { BrowserModule } from '@angular/platform-browser';

app.module.ts
-------------
// custom component
import { AppComponent } from './app.component';
// custom module
import { PassengerDashboardModule } from './passenger-dashboard/passenger-dashboard.module'; <---- add thete

@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, FormsModule, PassengerDashboardModule], <---- add thete
  
  providers: [],
  bootstrap: [AppComponent],   
})
export class AppModule {}


4 Creating a container (smart) component
----------------------------------------
1) create a new container folder for smart component passenger-dashboard.component.ts
---> app/passenger-dashboard/container/passenger-dashboard/passenger-dashboard.component.ts
--->app/passenger-dashboard/container/passenger-dashboard/passenger-dashboard.component.css

2) create new folder for your model means for your interface
---> app/passenger-dashboard/container/passenger-dashboard/model/passesnger.interface.ts


passenger-dashboard.component.ts
-------------------------------
import { Component } from '@angular/core';
import { Passenger } from '../../models/passesnger.interface';

@Component({
  selector: 'passenger-dashboard',
  styleUrls: ['./passenger-dashboard.component.css'],
  template: `
    <div>
      <h3>Airline Passengers</h3>
      <ul>
        <li *ngFor="let passenger of passengers; let i = index">
          <span class="status" [class.checked-in]="passenger.checkedIn"></span>
          {{ i }}: {{ passenger.fullname }}
          <p>{{ passenger | json }}</p>
          <div class="data">
            {{
              passenger.checkInDate
                ? (passenger.checkInDate | date: 'yMMMMd' | uppercase)
                : 'not checked in'
            }}
          </div>
          <div class="children">
            Children:{{ passenger.children?.length || 0 }}
          </div>
        </li>
      </ul>
    </div>
  `,
})
export class PassengerDashboardComponent {
  passengers: Passenger[] = [
    {
      id: 1,
      fullname: 'Stephen',
      checkedIn: true,
      checkInDate: 1490742000000,
      children: null,
    },
    {
      id: 2,
      fullname: 'Rose',
      checkedIn: false,
      checkInDate: null,
      children: [
        { name: 'Ted', age: 12 },
        { name: 'Chloe', age: 7 },
      ],
    },
    {
      id: 3,
      fullname: 'James',
      checkedIn: true,
      checkInDate: 1491606000000,
      children: null,
    },
    {
      id: 4,
      fullname: 'Louise',
      checkedIn: true,
      checkInDate: 1488412800000,
      children: [{ name: 'Jessica', age: 1 }],
    },
    {
      id: 5,
      fullname: 'Tina',
      checkedIn: false,
      checkInDate: null,
      children: null,
    },
  ];
}



passenger-dashboard.module.ts
-----------------------------
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { PassengerDashboardComponent } from './container/passenger-dashboard/passenger-dashboard.component';

@NgModule({
  declarations: [PassengerDashboardComponent],  <---- Add here component
  imports: [BrowserModule],
  // add here component in exports , becasue from this feature module , only this component will talk outside , example in our app component
  exports: [PassengerDashboardComponent],   
})
export class PassengerDashboardModule {}  

passenger-dashboard.component.css
-------------------------------
moved all passenger related css from passenger app component to here.

.status {
  width: 10px;
  height: 10px;
  background: #c0392b;
  display: block;
  margin: 8px 10px 0 0;
  float: left;
  border-radius: 50%;
}
.status.checked-in {
  background: #2ecc71;
}

passesnger.interface.ts
------------------------
we creates seprate model folder for our interface so we are exporting from there , so we can access anywhere in our application

export interface Child {
  name: string;
  age: number;
}

export interface Passenger {
  id: number;
  fullname: string;
  checkedIn: boolean;
  checkInDate: number | null;
  children: Child[] | null;
}

app.component.ts
----------------
We have modified and cleaned the app component and refering  <passenger-dashboard> tag inside appcomponent. and move all code passenger related to passenger dashboard module 

import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div class="app">
      <passenger-dashboard></passenger-dashboard>    
    </div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {}


5 ngOnInit lifecycle hook
==========================
ngOninint is the first life cycle hooks or function which is run by angular when your component mounted or initilized.

import { Component, OnInit } from '@angular/core';   <---- add here
import { Passenger } from '../../models/passesnger.interface';

@Component({
  selector: 'passenger-dashboard',
  styleUrls: ['./passenger-dashboard.component.css'],
  template: `
    <div>
      <h3>Airline Passengers</h3>
      <ul>
        <li *ngFor="let passenger of passengers; let i = index">
          <span class="status" [class.checked-in]="passenger.checkedIn"></span>
          {{ i }}: {{ passenger.fullname }}
          <div class="data">
            {{
              passenger.checkInDate
                ? (passenger.checkInDate | date: 'yMMMMd' | uppercase)
                : 'not checked in'
            }}
          </div>
          <div class="children">
            Children:{{ passenger.children?.length || 0 }}
          </div>
        </li>
      </ul>
    </div>
  `,
})
export class PassengerDashboardComponent implements OnInit {
  passengers: Passenger[];
  constructor() {}

  ngOnInit() {                       <---- impelemnts here
    this.passengers = [
      {
        id: 1,
        fullname: 'Stephen',
        checkedIn: true,
        checkInDate: 1490742000000,
        children: null,
      },
      {
        id: 2,
        fullname: 'Rose',
        checkedIn: false,
        checkInDate: null,
        children: [
          { name: 'Ted', age: 12 },
          { name: 'Chloe', age: 7 },
        ],
      },
      {
        id: 3,
        fullname: 'James',
        checkedIn: true,
        checkInDate: 1491606000000,
        children: null,
      },
      {
        id: 4,
        fullname: 'Louise',
        checkedIn: true,
        checkInDate: 1488412800000,
        children: [{ name: 'Jessica', age: 1 }],
      },
      {
        id: 5,
        fullname: 'Tina',
        checkedIn: false,
        checkInDate: null,
        children: null,
      },
    ];
  }
}

6 setup Presentational (dumb) components
================================
Create a stateless/dumb component
create `components folder` for them and two folder for seprate componet inside `componets folder`.

app/passenger-dashboard/container/passenger-dashboard/components/passenger-count/passenger-count.component.ts
app/passenger-dashboard/container/passenger-dashboard/components/passenger-count/passenger-details.component.ts

passenger-count.component.ts
----------------------------
import { Component } from '@angular/core';

@Component({
  selector: 'passenger-count',
  template: ` <div>Count component</div> `,
})
export class PassengerCountComponent {}


passenger-details.component.ts
-------------------------------
import { Component } from '@angular/core';

@Component({
  selector: 'passenger-details',
  template: `<div>Details Component</div>`,
})
export class PassengerDetailsComponent {}


because we have created two seprate component we have to give the information to its module.

passenger-dashboard.module.ts
-------------------------------
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

// container component
import { PassengerDashboardComponent } from './container/passenger-dashboard/passenger-dashboard.component';

// Dumb component
import { PassengerCountComponent } from './components/passenger-count/passenger-count.component';
import { PassengerDetailsComponent } from './components/passenger-details/passenger-detail.component';

@NgModule({
  declarations: [
    PassengerDashboardComponent,
    PassengerDetailsComponent,          <--- added there
    PassengerCountComponent,   			<--- added there
  ], 
  imports: [BrowserModule],
  exports: [PassengerDashboardComponent],
})
export class PassengerDashboardModule {}


7 Passing data into components with @Input
==========================================
In previous chapter we have created own define tag, now we will create the our own property for our tag using @Input() decorators.

passenger-count.component.ts
----------------------------
import { Component, Input } from '@angular/core';
import { Passenger } from '../../models/passesnger.interface';

@Component({
  selector: 'passenger-count',
    template: `
    <div>
      <h3>Airline Passengers</h3>
      Total Checkedin: {{ checkedInCount() }} / {{ items.length }}
    </div>
  `,
})
export class PassengerCountComponent {
  @Input()
  items: Passenger[];   <-- You have created the property of your custom tag

  checkedInCount() {
    return this.items.filter((passenger) => passenger.checkedIn).length;
  }
}

passenger-dashboard.component.ts
-------------------------------
import { Component, OnInit } from '@angular/core';
import { Passenger } from '../../models/passesnger.interface';

@Component({
  selector: 'passenger-dashboard',
  styleUrls: ['./passenger-dashboard.component.css'],
  template: `
    <div>
      <h3>Airline Passengers</h3>
      <passenger-count [items]="passengers"></passenger-count>    <-- You have bind [items] property here
      <passenger-details></passenger-details>
      <ul>
        <li *ngFor="let passenger of passengers; let i = index">
          <span class="status" [class.checked-in]="passenger.checkedIn"></span>
          {{ i }}: {{ passenger.fullname }}
          <div class="data">
            {{
              passenger.checkInDate
                ? (passenger.checkInDate | date: 'yMMMMd' | uppercase)
                : 'not checked in'
            }}
          </div>
          <div class="children">
            Children:{{ passenger.children?.length || 0 }}
          </div>
        </li>
      </ul>
    </div>
  `,
})
export class PassengerDashboardComponent implements OnInit {
  passengers: Passenger[];
  constructor() {}

  ngOnInit() {
    this.passengers = [
      {
        id: 1,
        fullname: 'Stephen',
        checkedIn: true,
        checkInDate: 1490742000000,
        children: null,
      },
      {
        id: 2,
        fullname: 'Rose',
        checkedIn: false,
        checkInDate: null,
        children: [
          { name: 'Ted', age: 12 },
          { name: 'Chloe', age: 7 },
        ],
      },
      {
        id: 3,
        fullname: 'James',
        checkedIn: true,
        checkInDate: 1491606000000,
        children: null,
      },
      {
        id: 4,
        fullname: 'Louise',
        checkedIn: true,
        checkInDate: 1488412800000,
        children: [{ name: 'Jessica', age: 1 }],
      },
      {
        id: 5,
        fullname: 'Tina',
        checkedIn: false,
        checkInDate: null,
        children: null,
      },
    ];
  }
}

8 dynamic-input-ngfor 
==========================
we can apply ngFor with component as well , and now we are going to implement custom detail property for passenger-details component, and we will apply ng-for , with cusom component.

create a new css file for  passenger-detail.component.ts (passenger-detail.component.css), becasue now we have to move css from passenger-dashboard.component.ts to passenger-detail.component.ts 


passenger-detail.component.ts
-----------------------------
import { Component, Input } from '@angular/core';
import { Passenger } from '../../models/passesnger.interface';

@Component({
  selector: 'passenger-details',
  styleUrls: ['./passenger-detail.component.css'],
  template: `<div>
    <span class="status" [class.checked-in]="detail.checkedIn"></span>
    {{ detail.fullname }}
    <div class="data">
      {{
        detail.checkInDate
          ? (detail.checkInDate | date: 'yMMMMd' | uppercase)
          : 'not checked in'
      }}
    </div>
    <div class="children">Children:{{ detail.children?.length || 0 }}</div>
  </div>`,
})
export class PassengerDetailsComponent {
  @Input()              
  detail: Passenger;    <----- custom detail property created for <passenger-details> tag.



passenger-dashboard.component.ts
----------------------------------
import { Component, OnInit } from '@angular/core';
import { Passenger } from '../../models/passesnger.interface';

@Component({
  selector: 'passenger-dashboard',
  styleUrls: ['./passenger-dashboard.component.css'],
  template: `
    <div>
      <passenger-count [items]="passengers"></passenger-count>
      <passenger-details
        *ngFor="let passenger of passengers"              <----- dunamic input property with ngFOr
        [detail]="passenger"
      ></passenger-details>
    </div>
  `,
})
export class PassengerDashboardComponent implements OnInit {
  passengers: Passenger[];
  constructor() {}

  ngOnInit() {
    this.passengers = [
      {
        id: 1,
        fullname: 'Stephen',
        checkedIn: true,
        checkInDate: 1490742000000,
        children: null,
      },
      {
        id: 2,
        fullname: 'Rose',
        checkedIn: false,
        checkInDate: null,
        children: [
          { name: 'Ted', age: 12 },
          { name: 'Chloe', age: 7 },
        ],
      },
      {
        id: 3,
        fullname: 'James',
        checkedIn: true,
        checkInDate: 1491606000000,
        children: null,
      },
      {
        id: 4,
        fullname: 'Louise',
        checkedIn: true,
        checkInDate: 1488412800000,
        children: [{ name: 'Jessica', age: 1 }],
      },
      {
        id: 5,
        fullname: 'Tina',
        checkedIn: false,
        checkInDate: null,
        children: null,
      },
    ];
  }
}


passenger-detail.component.css
----------------------------------
.status {
  width: 10px;
  height: 10px;
  background: #c0392b;
  display: block;
  margin: 8px 10px 0 0;
  float: left;
  border-radius: 50%;
}
.status.checked-in {
  background: #2ecc71;
}

9 Emitting changes with @Output and EventEmitter
-----------------------------------------------
How we have created property uisng @Input() , decorator , same way we can create event property using @Output() decorator , and we need one more thing that is calledd EventEmitter , this is a constructor function , and this function constructor object will be assigned to @Output Property 

for example
----------
import { Component, Input, Output, EventEmitter } from '@angular/core';

@Component({
  selector: 'custom-tag',
  styleUrls: ['./passenger-detail.component.css'],
  template: `Hello`
})
class CustomTagComponent {
	
@Input()
customProp;

@Output()
onCustomEvent:EventEmitter<any> = new EventEmitter()
}


passenger-detail.component.ts
-----------------------------

import { Component, Input, Output, EventEmitter } from '@angular/core'; <-- import here @Output() and EventEmitter

import { Passenger } from '../../models/passesnger.interface';

@Component({
  selector: 'passenger-details',
  styleUrls: ['./passenger-detail.component.css'],
  template: `<div>
    <div>{{ detail | json }}</div>
    <span class="status" [class.checked-in]="detail.checkedIn"></span>

    <div *ngIf="editing">
      <input
        type="text"
        #name
        [value]="detail.fullname"
        (input)="onNameChange(name.value)"
      />
    </div>

    <div *ngIf="!editing">
      {{ detail.fullname }}
    </div>

    <div class="data">
      {{
        detail.checkInDate
          ? (detail.checkInDate | date: 'yMMMMd' | uppercase)
          : 'not checked in'
      }}
    </div>

    <div class="children">Children:{{ detail.children?.length || 0 }}</div>

    <button (click)="toggleEdit()">{{ editing ? 'Done' : 'Edit' }}</button>
    <button (click)="onRemove()">Remove</button>
  </div>`,
})
export class PassengerDetailsComponent {
  @Input()
  detail: Passenger;

  @Output()
  onEdit: EventEmitter<any> = new EventEmitter();     <-- creating here component event property

  @Output()
  onDelete: EventEmitter<any> = new EventEmitter();   <-- creating here component event property

  editing: boolean = false;

  onNameChange(value: string) {
    this.detail.fullname = value;
  }

  toggleEdit() {
    if (this.editing) {
      this.onEdit.emit(this.detail);
    }

    this.editing = !this.editing;
  }

  onRemove() {
    this.onDelete.emit(this.detail);
  }
}


passenger-dashboard.component.ts
-------------------------------
import { Component, OnInit } from '@angular/core';
import { Passenger } from '../../models/passesnger.interface';

@Component({
  selector: 'passenger-dashboard',
  styleUrls: ['./passenger-dashboard.component.css'],
  template: `
    <div>
      <passenger-count [items]="passengers"></passenger-count>
      <passenger-details
        *ngFor="let passenger of passengers"
        [detail]="passenger"
        (onEdit)="onEditHandler($event)"
        (onDelete)="onDeleteHandler($event)"
      ></passenger-details>
    </div>
  `,
})
export class PassengerDashboardComponent implements OnInit {
  passengers: Passenger[];
  constructor() {}

  ngOnInit() {
    this.passengers = [
      {
        id: 1,
        fullname: 'Stephen',
        checkedIn: true,
        checkInDate: 1490742000000,
        children: null,
      },
      {
        id: 2,
        fullname: 'Rose',
        checkedIn: false,
        checkInDate: null,
        children: [
          { name: 'Ted', age: 12 },
          { name: 'Chloe', age: 7 },
        ],
      },
      {
        id: 3,
        fullname: 'James',
        checkedIn: true,
        checkInDate: 1491606000000,
        children: null,
      },
      {
        id: 4,
        fullname: 'Louise',
        checkedIn: true,
        checkInDate: 1488412800000,
        children: [{ name: 'Jessica', age: 1 }],
      },
      {
        id: 5,
        fullname: 'Tina',
        checkedIn: false,
        checkInDate: null,
        children: null,
      },
    ];
  }

  onEditHandler(event: any) {
    console.log(event);
  }

  onDeleteHandler(event: any) {
    console.log(event);
  }
}



10 Immutable state changes, implement edit and delete passenger in immutable way.
--------------------------------------------------------------------------------
passenger-dashboard.component.ts
-------------------------------
import { Component, OnInit } from '@angular/core';
import { Passenger } from '../../models/passesnger.interface';

@Component({
  selector: 'passenger-dashboard',
  styleUrls: ['./passenger-dashboard.component.css'],
  template: `
    <div>
      <passenger-count [items]="passengers"></passenger-count>
      <passenger-details
        *ngFor="let passenger of passengers"
        [detail]="passenger"
        (onEdit)="onEditHandler($event)"
        (onDelete)="onDeleteHandler($event)"
      ></passenger-details>
    </div>
  `,
})
export class PassengerDashboardComponent implements OnInit {
  passengers: Passenger[];
  constructor() {}

  ngOnInit() {
    this.passengers = [
      {
        id: 1,
        fullname: 'Stephen',
        checkedIn: true,
        checkInDate: 1490742000000,
        children: null,
      },
      {
        id: 2,
        fullname: 'Rose',
        checkedIn: false,
        checkInDate: null,
        children: [
          { name: 'Ted', age: 12 },
          { name: 'Chloe', age: 7 },
        ],
      },
      {
        id: 3,
        fullname: 'James',
        checkedIn: true,
        checkInDate: 1491606000000,
        children: null,
      },
      {
        id: 4,
        fullname: 'Louise',
        checkedIn: true,
        checkInDate: 1488412800000,
        children: [{ name: 'Jessica', age: 1 }],
      },
      {
        id: 5,
        fullname: 'Tina',
        checkedIn: false,
        checkInDate: null,
        children: null,
      },
    ];
  }

  onEditHandler(event: Passenger) {
    this.passengers = this.passengers.map((passenger: Passenger) => {
      if (passenger.id === event.id) {
        passenger = { ...event };
      }

      return passenger;
    });
    console.log(this.passengers);
  }

  onDeleteHandler(event: Passenger) {
    this.passengers = this.passengers.filter((passenger: Passenger) => {
      return passenger.id !== event.id;
    });
    console.log(this.passengers);
  }
}


11 ngOnChanges lifecycle hook
==============================
ngOnChanges(changes:simpleChanges){} , is a life cycle hooks which runs before ngOnInit() life cycle hooks , and changes object is about all @Input() property listed in this changes object where we can see previousValue and currentValue , so suppose whenever value will be changed of @Input() property from parent component , this ngOnChanges life cycle hooks will be triggred , and you can get updated value of @input() property.


passenger-dashboard.component.ts
-------------------------------
import { Component, OnInit } from '@angular/core';
import { Passenger } from '../../models/passesnger.interface';

@Component({
  selector: 'passenger-dashboard',
  styleUrls: ['./passenger-dashboard.component.css'],
  template: `
    <div>
      <passenger-count [items]="passengers"></passenger-count>
      <p *ngFor="let passenger of passengers">{{ passenger.fullname }}</p>
      <passenger-details
        *ngFor="let passenger of passengers"
        [detail]="passenger"
        (onEdit)="onEditHandler($event)"
        (onDelete)="onDeleteHandler($event)"
      ></passenger-details>
    </div>
  `,
})
export class PassengerDashboardComponent implements OnInit {
  passengers: Passenger[];
  constructor() {}

  ngOnInit() {
    this.passengers = [
      {
        id: 1,
        fullname: 'Stephen',
        checkedIn: true,
        checkInDate: 1490742000000,
        children: null,
      },
      {
        id: 2,
        fullname: 'Rose',
        checkedIn: false,
        checkInDate: null,
        children: [
          { name: 'Ted', age: 12 },
          { name: 'Chloe', age: 7 },
        ],
      },
      {
        id: 3,
        fullname: 'James',
        checkedIn: true,
        checkInDate: 1491606000000,
        children: null,
      },
      {
        id: 4,
        fullname: 'Louise',
        checkedIn: true,
        checkInDate: 1488412800000,
        children: [{ name: 'Jessica', age: 1 }],
      },
      {
        id: 5,
        fullname: 'Tina',
        checkedIn: false,
        checkInDate: null,
        children: null,
      },
    ];
  }

  onEditHandler(event: Passenger) {
    this.passengers = this.passengers.map((passenger: Passenger) => {
      if (passenger.id === event.id) {
        passenger = { ...event };
      }

      return passenger;
    });
  }

  onDeleteHandler(event: Passenger) {
    this.passengers = this.passengers.filter((passenger: Passenger) => {
      return passenger.id !== event.id;
    });
  }
}

passenger-detail.component.ts
------------------------------
import {
  Component,
  Input,
  Output,
  EventEmitter,
  OnChanges,
  OnInit,
} from '@angular/core';

import { Passenger } from '../../models/passesnger.interface';

@Component({
  selector: 'passenger-details',
  styleUrls: ['./passenger-detail.component.css'],
  template: `<div>
    <span class="status" [class.checked-in]="detail.checkedIn"></span>

    <div *ngIf="editing">
      <input
        type="text"
        #name
        [value]="detail.fullname"
        (input)="onNameChange(name.value)"
      />
    </div>

    <div *ngIf="!editing">
      {{ detail.fullname }}
    </div>

    <div class="data">
      {{
        detail.checkInDate
          ? (detail.checkInDate | date: 'yMMMMd' | uppercase)
          : 'not checked in'
      }}
    </div>

    <div class="children">Children:{{ detail.children?.length || 0 }}</div>

    <button (click)="toggleEdit()">{{ editing ? 'Done' : 'Edit' }}</button>
    <button (click)="onRemove()">Remove</button>
  </div>`,
})
export class PassengerDetailsComponent implements OnChanges, OnInit {
  @Input()
  detail: Passenger;

  @Output()
  onEdit: EventEmitter<any> = new EventEmitter();

  @Output()
  onDelete: EventEmitter<any> = new EventEmitter();

  ngOnChanges(changes) {
    if (changes.detail) {
      this.detail = { ...changes.detail.currentValue };
    }
    console.log('ngOnChanges');
  }

  ngOnInit() {
    console.log('ngOnInit');
  }

  editing: boolean = false;

  onNameChange(value: string) {
    this.detail.fullname = value;
  }

  toggleEdit() {
    if (this.editing) {
      this.onEdit.emit(this.detail);
    }

    this.editing = !this.editing;
  }

  onRemove() {
    this.onDelete.emit(this.detail);
  }
}

**************Services, Http and Observables************
Services are singelton pattern in angular means one service objet is shared all are the places (component).


1 Data Services and Dependency Injection
--------------------------------------
create a new service passenger-dashboard.service (passenger-dashboard.service) inside

src\app\passenger-dashboard\passenger-dashboard.service

passenger-dashboard.service
-----------------------------
import { Passenger } from './models/passesnger.interface';

export class PassengerDashboardService {
  constructor() {}

  getPassengers(): Passenger[] {
    return [
      {
        id: 1,
        fullname: 'Stephen',
        checkedIn: true,
        checkInDate: 1490742000000,
        children: null,
      },
      {
        id: 2,
        fullname: 'Rose',
        checkedIn: false,
        checkInDate: null,
        children: [
          { name: 'Ted', age: 12 },
          { name: 'Chloe', age: 7 },
        ],
      },
      {
        id: 3,
        fullname: 'James',
        checkedIn: true,
        checkInDate: 1491606000000,
        children: null,
      },
      {
        id: 4,
        fullname: 'Louise',
        checkedIn: true,
        checkInDate: 1488412800000,
        children: [{ name: 'Jessica', age: 1 }],
      },
      {
        id: 5,
        fullname: 'Tina',
        checkedIn: false,
        checkInDate: null,
        children: null,
      },
    ];
  }
}

Passenger-dashboard.module.ts
-------------------------

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

// container component
import { PassengerDashboardComponent } from './container/passenger-dashboard/passenger-dashboard.component';

// Dumb component
import { PassengerCountComponent } from './components/passenger-count/passenger-count.component';
import { PassengerDetailsComponent } from './components/passenger-details/passenger-detail.component';

// service
import { PassengerDashboardService } from './passenger-dashboard.service';

@NgModule({
  declarations: [
    PassengerDashboardComponent,
    PassengerDetailsComponent,
    PassengerCountComponent,
  ],
  imports: [BrowserModule],
  exports: [PassengerDashboardComponent],
  providers: [PassengerDashboardService],   <--- added here, it means this will server to all declration component
})
export class PassengerDashboardModule {}



Passenger-dashboard.component.ts
-------------------------------

import { Component, OnInit } from '@angular/core';
import { Passenger } from '../../models/passesnger.interface';
import { PassengerDashboardService } from '../../passenger-dashboard.service';

@Component({
  selector: 'passenger-dashboard',
  styleUrls: ['./passenger-dashboard.component.css'],
  template: `
    <div>
      <passenger-count [items]="passengers"></passenger-count>
      <p *ngFor="let passenger of passengers">{{ passenger.fullname }}</p>
      <passenger-details
        *ngFor="let passenger of passengers"
        [detail]="passenger"
        (onEdit)="onEditHandler($event)"
        (onDelete)="onDeleteHandler($event)"
      ></passenger-details>
    </div>
  `,
})
export class PassengerDashboardComponent implements OnInit {
  passengers: Passenger[];
  // angular will inject the service singelton object for you there
  constructor(private passengerService: PassengerDashboardService) {}   <--- injected service there

  ngOnInit() {
    console.log(this.passengerService);
    this.passengers = this.passengerService.getPassengers(); <--- used service there
  }

  onEditHandler(event: Passenger) {
    this.passengers = this.passengers.map((passenger: Passenger) => {
      if (passenger.id === event.id) {
        passenger = { ...event };
      }

      return passenger;
    });
  }

  onDeleteHandler(event: Passenger) {
    this.passengers = this.passengers.filter((passenger: Passenger) => {
      return passenger.id !== event.id;
    });
  }
}


2 Understanding @Injectable
===========================
when ypu want to use other service inside your service that time this is compulsery , that you have to add @Injectable() decorator with service , and you can tell there on which level you want to provide the service so in this decorator we give the parameter `providedIn: 'root'` it means this service will provide to all the places means it is available on root level.

SO good practice says you whould always use @Injectable() with the services , and this is compulsery when other servicees inside to inject in your services for example http service.  so no matter other services are injected or not in your services you should always use the @injectable

you should use @Injectable({ providedIn: 'root' }) with service in that case you dont have to register service in Provider array in module.


src\app\passenger-dashboard\passenger-dashboard.service.ts
------------------------------------------------------

import { Injectable } from '@angular/core';
import { Passengers } from './model/passenger.interface';
import { HttpClient } from '@angular/common/http';

@Injectable({ providedIn: 'root' })
export class PassengerDashboardService {
  constructor(private http: HttpClient) {  <--- inject another service in our service
    console.log(this.http);   
  }

  getPassengers(): Passengers[] {
    return [
      {
        id: 1,
        fullname: 'Stephen',
        checkedIn: true,
        checkInDate: 1490742000000,
        children: null,
      },
      {
        id: 2,
        fullname: 'Rose',
        checkedIn: false,
        checkInDate: null,
        children: [
          { name: 'Ted', age: 12 },
          { name: 'Chloe', age: 7 },
        ],
      },
      {
        id: 3,
        fullname: 'James',
        checkedIn: true,
        checkInDate: 1491606000000,
        children: null,
      },
      {
        id: 4,
        fullname: 'Louise',
        checkedIn: true,
        checkInDate: 1488412800000,
        children: [{ name: 'Jessica', age: 1 }],
      },
      {
        id: 5,
        fullname: 'Tina',
        checkedIn: false,
        checkInDate: null,
        children: null,
      },
    ];
  }
}

src\app\passenger-dashboard\passenger-dashboard.module.ts
--------------------------------------------------------
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { HttpClientModule } from '@angular/common/http'; <-- mosule for http service

// container/ smart/ presentational
import { PassengerDashboardComponent } from './container/passenger-dashboard/passenger-dashboard.component';

// dumb component
import { PassengerCountComponent } from './components/passenger-count/passenger-count.component';
import { PassengerDetailComponent } from './components/passenger-details/passenger-detail.component';
import { PassengerDashboardService } from './passenger-dashboard.service';

@NgModule({
  declarations: [
    // container/ smart component
    PassengerDashboardComponent,
    // dumb component
    PassengerCountComponent,
    PassengerDetailComponent,
  ],
  // here we added HttpClientModule for usiing http service in our application
  imports: [BrowserModule, HttpClientModule], 
  exports: [PassengerDashboardComponent],
  // no need for provider becasue we are usng @Injectable({ providedIn: 'root' }) in the service. it means this service provided to root lavel by angular
  //providers: [PassengerDashboardService],  
})
export class PassengerDashboardModule {}



3 Http data fetching with Observables
======================================
in angular we do use rxjs lib whis is observable based so when we have to need any result from observable we have to subscibe for it , we dont use promise based api in angular, so here we have to consume only observale

example for using observable
-------------------------
var request = doApiCall() // in agular http call givex observable so you have to subscribe for it

request.subscibe(
	(data)=>{
		console.log(data)
	},
	(error)=>{
		console.log(error)
	},
)


set the fake json server from  https://www.npmjs.com/package/json-server

Stpes to setup :-
-------
1) npm install -g json-server
2) json-server --watch db.json
3) your db,json file will be created and update the file with below endpoin

db.json
-------
{
  "passengers": [
    {
      "id": 1,
      "fullname": "Steve",
      "checkedIn": true,
      "checkInDate": 1490742000000,
      "children": null
    },
    {
      "id": 2,
      "fullname": "Rose",
      "checkedIn": false,
      "checkInDate": null,
      "children": [
        {
          "name": "Ted",
          "age": 12
        },
        {
          "name": "Chloe",
          "age": 7
        }
      ]
    },
    {
      "id": 4,
      "fullname": "Louise",
      "checkedIn": true,
      "checkInDate": 1488412800000,
      "children": [
        {
          "name": "Jessica",
          "age": 1
        }
      ]
    },
    {
      "id": 5,
      "fullname": "Tina",
      "checkedIn": false,
      "checkInDate": null,
      "children": null
    }
  ]
}

passenger-dashboard.component.ts
------------------------------
import { Component, OnInit } from '@angular/core';
import { Passengers } from '../../model/passenger.interface';
import { PassengerDashboardService } from '../../passenger-dashboard.service';

@Component({
  selector: 'passenger-dashboard',
  styleUrls: ['./passenger-dashboard.component.css'],
  template: `
    <div>
      <passenger-count [items]="passengers"></passenger-count>

      <passenger-detail
        *ngFor="let passenger of passengers"
        [detail]="passenger"
        (onEdit)="onEditHandler($event)"
        (onDelete)="onDeleteHandler($event)"
      >
      </passenger-detail>
    </div>
  `,
})
export class PassengerDashboardComponent implements OnInit {
  passengers: Passengers[] = [];  <-- inilize with empty array
  constructor(private passengerDashboardService: PassengerDashboardService) {}

  ngOnInit() {
    this.passengerDashboardService
      .getPassengers()           <-- this will give observable, then we have to subscribe the result
      .subscribe((data: Passengers[]) => {
        this.passengers = data;
      });
  }

  onEditHandler(event: Passengers) {
    this.passengers = this.passengers.map((passenger) => {
      if (passenger.id === event.id) {
        passenger = { ...event };
      }
      return passenger;
    });
  }

  onDeleteHandler(event: Passengers) {
    this.passengers = this.passengers.filter((passenger) => {
      return passenger.id !== event.id;
    });
  }
}

4 Http put, delete with immutable state
---------------------------------------
we have implemented get request now we will work on update and delete request , we already implemented edit passenger and delete passenger in our smart component in the browser memory , but now we will perform as a server call.


passenger-dashboard.service.ts
-------------------------------
import { Injectable } from '@angular/core';
import { Passengers } from './model/passenger.interface';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

const PASSENGER_API: string = 'http://localhost:3000/passengers';

@Injectable({ providedIn: 'root' })
export class PassengerDashboardService {
  constructor(private http: HttpClient) {
    console.log(this.http);
  }


  getPassengers(): Observable<Object> {
    return this.http.get(PASSENGER_API);  <-- http get request
  }

  updatePassenger(passenger: Passengers): Observable<Object> {
    return this.http.put(`${PASSENGER_API}/${passenger.id}`, passenger); <-- http put request
  }

  removePassenger(passenger: Passengers): Observable<Object> {
    return this.http.delete(`${PASSENGER_API}/${passenger.id}`); <-- http delete request
  }
}

passenger-dashboard.component.ts
---------------------------------
we will implement sbove mentioned method in the smart component.

import { Component, OnInit } from '@angular/core';
import { Passengers } from '../../model/passenger.interface';
import { PassengerDashboardService } from '../../passenger-dashboard.service';

@Component({
  selector: 'passenger-dashboard',
  styleUrls: ['./passenger-dashboard.component.css'],
  template: `
    <div>
      <passenger-count [items]="passengers"></passenger-count>

      <passenger-detail
        *ngFor="let passenger of passengers"
        [detail]="passenger"
        (onEdit)="onEditHandler($event)"
        (onDelete)="onDeleteHandler($event)"
      >
      </passenger-detail>
    </div>
  `,
})
export class PassengerDashboardComponent implements OnInit {
  passengers: Passengers[] = [];
  constructor(private passengerDashboardService: PassengerDashboardService) {}

  ngOnInit() {
    // get the passenger ushing passengerDashboardService.getPassengers()
    this.passengerDashboardService
      .getPassengers()
      .subscribe((data: Passengers[]) => {
        this.passengers = data;
      });
  }

  onEditHandler(event: Passengers) {
    // update(put) the passenger ushing passengerDashboardService.updatePassenger()
    this.passengerDashboardService.updatePassenger(event).subscribe((data) => {
      // console.log(data);

      this.passengers = this.passengers.map((passenger) => {
        if (passenger.id === event.id) {
          passenger = { ...event };
        }
        return passenger;
      });
    });
  }

  onDeleteHandler(event: Passengers) {
    // delete  the passenger ushing passengerDashboardService.removePassenger()
    this.passengerDashboardService.removePassenger(event).subscribe((data) => {
      //console.log(data);

      this.passengers = this.passengers.filter((passenger) => {
        return passenger.id !== event.id;
      });
    });
  }
}


5 Custom Headers and RequestOptions
====================================
when you work in real application you hve to set your headers , while make any request , there could be multiple reason like set authentication key , compulsery extra headers , some headers for your cross origin fix , so you can create and make option like below and set as a last parameter of any request , and you can see in network tab they are working

import { Injectable } from '@angular/core';
import { Passengers } from './model/passenger.interface';
import { HttpClient, HttpHeaders } from '@angular/common/http';  <------ import HttpHeaders object there 
import { Observable } from 'rxjs';

const PASSENGER_API: string = 'http://localhost:3000/passengers';

passenger-dashboard.service.ts
-------------------------------
const httpOptions = {                <------ create the options object for your http methods
  headers: new HttpHeaders({          <------ construct HttpHeaders object there 
    'Content-Type': 'application/json',
    'x-authorization-code': 'my-auth-token',
  }),
};

@Injectable({ providedIn: 'root' })
export class PassengerDashboardService {
  constructor(private http: HttpClient) {
    console.log(this.http);
  }

  getPassengers(): Observable<Object> {
    return this.http.get(PASSENGER_API, httpOptions);
  }

  updatePassenger(passenger: Passengers): Observable<Object> {
    return this.http.put(
      `${PASSENGER_API}/${passenger.id}`,
      passenger,
      httpOptions
    );
  }

  removePassenger(passenger: Passengers): Observable<Object> {
    return this.http.delete(`${PASSENGER_API}/${passenger.id}`, httpOptions);
  }
}



***************** Template-driven Forms, Inputs and Validation******************

1 Forms container component (passenger-viewer.component.ts)
-------------------------------------------------------
create a new smart container component for passenger-viwer component , this will show a single passenger.

src\app\passenger-dashboard\container\passenger-viewer\passenger-viewer.component.ts



passenger-viewer.component.ts
-----------------------------
import { Component, OnInit } from '@angular/core';
import { Passengers } from '../../model/passenger.interface';
import { PassengerDashboardService } from '../../passenger-dashboard.service';

@Component({
  selector: 'passenger-viewer',
  styleUrls: ['./passenger-viewer.component.css'],
  template: ` <div>{{ passenger | json }}</div> `,    <--- this will show a passenger object here on screen 
})
export class PassengerViewerComponent implements OnInit {
  passenger: Passengers;

  constructor(private passengerService: PassengerDashboardService) {}
  ngOnInit() {   
    this.passengerService.getPassenger(1).subscribe((passenger: Passengers) => {    
      this.passenger = passenger;   <--- this will make a single passenger api call and assign in passenger object
    });
  }
}


passenger-dashboard.service.ts
--------------------------------
import { Injectable } from '@angular/core';
import { Passengers } from './model/passenger.interface';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';

const PASSENGER_API: string = 'http://localhost:3000/passengers';

const httpOption = {
  headers: new HttpHeaders({
    Pragma: 'private',
    'Content-Type': 'application/json',
    'x-authentication-cod': 'my auhhenticcation key',
  }),
};

@Injectable({ providedIn: 'root' })
export class PassengerDashboardService {
  constructor(private http: HttpClient) {
    console.log(this.http);
  }

  getPassengers(): Observable<any> {   
    return this.http.get(PASSENGER_API, httpOption);
  }

  getPassenger(id): Observable<any> {
    return this.http.get(`${PASSENGER_API}/${id}`);   <--- Add a another new method there to fetch single passenger
  }

  updatePassenger(passenger: Passengers) {
    return this.http.put(
      `${PASSENGER_API}/${passenger.id}`,
      passenger,
      httpOption
    );
  }

  removePassenger(passenger: Passengers) {
    return this.http.delete(`${PASSENGER_API}/${passenger.id}`, httpOption);
  }
}


passenger-dashboard.module.ts
-----------------------------
register in passenger dashboard module , and add in exports array , temporary purpose we want to show in our main app 

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { HttpClientModule } from '@angular/common/http';

// container/ smart/ presentational
import { PassengerDashboardComponent } from './container/passenger-dashboard/passenger-dashboard.component';
import { PassengerViewerComponent } from './container/passenger-viewer/passenger-viewer.component';

// dumb component
import { PassengerCountComponent } from './components/passenger-count/passenger-count.component';
import { PassengerDetailComponent } from './components/passenger-details/passenger-detail.component';

// import the service , incase you dont providein decorator
import { PassengerDashboardService } from './passenger-dashboard.service';

@NgModule({
  declarations: [
    // container/ smart component
    PassengerDashboardComponent,
    PassengerViewerComponent,    <---- added there
    // dumb component
    PassengerCountComponent,
    PassengerDetailComponent,
  ],
  imports: [BrowserModule, HttpClientModule],
  exports: [PassengerDashboardComponent, PassengerViewerComponent],  <---- added there , to communicate outside
  //providers: [PassengerDashboardService],
})
export class PassengerDashboardModule {}

src\app\app.component.ts
-----------------------

import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div>
      <!-- our application start from here -->
      <!--  <passenger-dashboard></passenger-dashboard> -->   <-- so we commneed this component
      <passenger-viewer></passenger-viewer>              <-- and aded a new componenet there
    </div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {}


2 Form stateless component (passenger-form.component.ts) and update the data structure , remove the child and add the baggage
-------------------------------------------------------------------------------------------------------------------------------
create a new dumb component passenger-form , which will be refrenced by container component passenger-viwer , and that will send passenger data to this passenger-form component.

src\app\passenger-dashboard\components\passenger-form\passenger-form.component.ts

passenger-form.component.ts
-------------------------
import { Component, Input } from '@angular/core';
import { Passengers } from '../../model/passenger.interface';

@Component({
  selector: 'passenger-form',
  styleUrls: ['./passenger-form.component.css'],
  template: `
    Passenger Form !!!
    <div>{{ detail | json }}</div>
  `,
})
export class PassengerFormComponent {
  @Input()
  detail: Passengers;   <--- created a custom detail property using @Input() decorators
}


passenger-dashboard.module.ts
---------------------------------
inform to module , thet new component passenger-form created.


import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { HttpClientModule } from '@angular/common/http';

// container/ smart/ presentational
import { PassengerDashboardComponent } from './container/passenger-dashboard/passenger-dashboard.component';
import { PassengerViewerComponent } from './container/passenger-viewer/passenger-viewer.component';

// dumb component
import { PassengerCountComponent } from './components/passenger-count/passenger-count.component';
import { PassengerDetailComponent } from './components/passenger-details/passenger-detail.component';
import { PassengerFormComponent } from './components/passenger-form/passenger-form.component';   <---added there

// import the service , incase you dont providein decorator
import { PassengerDashboardService } from './passenger-dashboard.service';

@NgModule({
  declarations: [
    // container/ smart component
    PassengerDashboardComponent,
    PassengerViewerComponent,
    // dumb component
    PassengerCountComponent,
    PassengerDetailComponent,
    PassengerFormComponent,  <---added there
  ],
  imports: [BrowserModule, HttpClientModule],
  exports: [PassengerDashboardComponent, PassengerViewerComponent],
  //providers: [PassengerDashboardService],
})
export class PassengerDashboardModule {}


passenger-viewer.component.ts
------------------------------
import { Component, OnInit } from '@angular/core';
import { Passengers } from '../../model/passenger.interface';
import { PassengerDashboardService } from '../../passenger-dashboard.service';

@Component({
  selector: 'passenger-viewer',
  styleUrls: ['./passenger-viewer.component.css'],
  template: `
    <div>
      <passenger-form [detail]="passenger"></passenger-form>    <--- added there and create custom property detail
    </div>
  `,
})
export class PassengerViewerComponent implements OnInit {
  passenger: Passengers;

  constructor(private passengerService: PassengerDashboardService) {}
  ngOnInit() {
    this.passengerService.getPassenger(1).subscribe((passenger: Passengers) => {
      this.passenger = passenger;
    });
  }
}

update the datastructure
----------------------
remove child property from Passenger interface.

model\passenger.interface.ts
---------------------------
export interface Child {
  name: string;
  age: number;
}

export interface Passengers {
  id: number;
  fullname: string;
  checkedIn: boolean;
  checkInDate: number | null;
  baggage: string;    <---- remove Child from there and add baggage with string type property
}


db.json
--------
changed the data structure , because we had removed child property from object , and added baggage property instead

{
  "passengers": [
    {
      "id": 1,
      "fullname": "Steve123",
      "checkedIn": true,
      "checkInDate": 1490742000000,
      "baggage": ""
    },
    {
      "id": 2,
      "fullname": "Rose",
      "checkedIn": false,
      "checkInDate": null,
      "baggage": ""
    },
    {
      "id": 4,
      "fullname": "Louise",
      "checkedIn": true,
      "checkInDate": 1488412800000,
      "baggage": ""
    },
    {
      "id": 5,
      "fullname": "Tina",
      "checkedIn": false,
      "checkInDate": null,
      "baggage": ""
    }
  ]
}



passenger-detail.component.ts
----------------------------------
remove child from component code as well , because that would not be avaibale in our code now

import {
  Component,
  Input,
  Output,
  EventEmitter,
  OnInit,
  OnChanges,
} from '@angular/core';
import { Passengers } from '../../model/passenger.interface';

@Component({
  selector: 'passenger-detail',
  styleUrls: ['./passenger-detail.component.css'],
  template: `<div>
    <span class="status" [class.checked-in]="detail.checkedIn"></span>

    <div>
      <input
        *ngIf="editing"
        type="text"
        [value]="detail.fullname"
        #name
        (input)="onNameChange(name.value)"
      />
    </div>

    <div *ngIf="!editing">{{ detail.fullname }}</div>
															<----- Child removed from there
    <div class="date">
      {{
        detail.checkInDate
          ? (detail.checkInDate | date: 'yMMMMd' | uppercase)
          : 'not checked in'
      }}
    </div>

    <button (click)="toggleEdit()">{{ editing ? 'Done' : 'Edit' }}</button>
    <button (click)="onRemove()">Remove</button>
  </div>`,
})
export class PassengerDetailComponent implements OnInit, OnChanges {
  @Input()
  detail: Passengers;

  @Output()
  onEdit = new EventEmitter();

  @Output()
  onDelete = new EventEmitter();

  editing: boolean = false;

  ngOnInit(): void {
    //console.log('ngOnInit()');
  }

  ngOnChanges(changes: any): void {
    this.detail = { ...changes.detail.currentValue };
  }

  onNameChange(value: string) {
    this.detail.fullname = value;
  }

  toggleEdit() {
    if (this.editing) {
      this.onEdit.emit(this.detail);
    }

    this.editing = !this.editing;
  }

  onRemove() {
    this.onDelete.emit(this.detail);
  }
}



3 ngForm and ngModel
4 Binding to radio buttons
5 Binding to checkboxes
=====================
passenger-form.component.ts
---------------------------
import { Component, Input } from '@angular/core';
import { Passengers } from '../../model/passenger.interface';

@Component({
  selector: 'passenger-form',
  styleUrls: ['./passenger-form.component.css'],
  template: `
    Passenger Form !!!

    <form #form="ngForm" (click)="test(form)">
      {{ detail | json }}
      <div>
        <input type="text" name="fullname" [ngModel]="detail?.fullname" />
      </div>

      <div>
        <input type="number" name="id" [ngModel]="detail?.id" />
      </div>

      <div>
        <label
          >Yes
          <input
            type="radio"
            name="checkedIn"
            [ngModel]="detail?.checkedIn"
            [value]="true"
            (ngModelChange)="toggleCheckedIn($event)"
          />
        </label>

        <label
          >Yes
          <input
            type="radio"
            name="checkedIn"
            [ngModel]="detail?.checkedIn"
            [value]="false"
            (ngModelChange)="toggleCheckedIn($event)"
          />
        </label>
        <label>No</label>
      </div>
	  
	 <!--  <div>
          <input
            type="checkbox"
            name="checkedIn"
            [ngModel]="detail?.checkedIn"
            (ngModelChange)="toggleCheckedIn($event)"
          />
        </div>  -->


      <div *ngIf="form.value?.checkedIn">
        Checked in Date
        <input type="text" name="checkInDate" [ngModel]="detail?.checkInDate" />
      </div>

      {{ form.value | json }}
    </form>
  `,
})
export class PassengerFormComponent {
  @Input()
  detail: Passengers;

  toggleCheckedIn(event) {
    console.log(event);
    this.detail.checkInDate = Date.now();
  }

  test(form) {
    console.log(form);
  }
}


passenger-dashboard.module.ts
-------------------------------
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { HttpClientModule } from '@angular/common/http';
import { FormsModule } from '@angular/forms';   <--- add the form module for ngForm , ngModel directive or functinality


// container/ smart/ presentational
import { PassengerDashboardComponent } from './container/passenger-dashboard/passenger-dashboard.component';
import { PassengerViewerComponent } from './container/passenger-viewer/passenger-viewer.component';

// dumb component
import { PassengerCountComponent } from './components/passenger-count/passenger-count.component';
import { PassengerDetailComponent } from './components/passenger-details/passenger-detail.component';
import { PassengerFormComponent } from './components/passenger-form/passenger-form.component';

// import the service , incase you dont providein decorator
import { PassengerDashboardService } from './passenger-dashboard.service';


@NgModule({
  declarations: [
    // container/ smart component
    PassengerDashboardComponent,
    PassengerViewerComponent,
    // dumb component
    PassengerCountComponent,
    PassengerDetailComponent,
    PassengerFormComponent,
  ],
  imports: [BrowserModule, HttpClientModule, FormsModule], <--- add the form module for ngForm , ngModel directive or functinality
  exports: [PassengerDashboardComponent, PassengerViewerComponent],
  //providers: [PassengerDashboardService],
})
export class PassengerDashboardModule {}


/*
Template driven form: in angular we have one way to handle form that is called template driven form , it means our form completely maintained in template , and ngFOrm.value will maintain our all input value.

Imporatnt Rule:- always we have to give name proprty to input type element. because that will be used on NgFOrm.value object as a object property for corresposnding input.

FormsModule --> this module is given by the angular which is responsible to give form based functinality , like ngForm directive , ngModel , NgModelChange directive.

<form #form="ngForm"></from> --> it means you are assigning ngFOrm directive complex object to template ref variable , and ngForm object track the complete form activity here.

ngModel --> if you only keep ngModel then it means it will attach input name to ngForm.value object , and whenever corresponsing input get changed this object will be changed automatically ,  means it will keep update ngForm.value object


[ngModel] = "value-expression" --> means this will take one intial value of input and keep initial value to ngFOrm.value object.

for example:-
step 1
-------
<form #myform="ngForm">
	<input type="text" name="myName">
<form>
 
if you check now  myform.value it gives empty object--> {}

step 2 attaching ngModel
-------
<form #myform="ngForm">
	<input type="text" name="myName" ngModel>
<form>

if you check now  myform.value it gives empty object--> {myName: ''}

step 3 attaching property binding [ngModel]="value-expression"
-------
<form #myform="ngForm">
	<input type="text" name="myName" [ngModel]="'sarang Jain'">
<form>

if you check now  myform.value it gives empty object--> {myName: 'sarang Jain'}

*/

/*
Another use case of ngModel
----------------------------
<form #userForm = "ngForm" (ngSubmit)="handleSubmit($event)">
    <input type="text" [ngModel]="'sarang jain'"  #userName='ngModel' />
	<button type="submit">submit form</button>
</form>


so we have seen ngFom is a directive , which is responsible to track complete form, in the same way we have ngModel object, which is responsible  to track complete input element, so here how we access ngFOrm object using `UserForm.something` , in the same way we can access here using `userName.something`.

<input type="text" #userName='ngModel' />
<form #userForm = "ngForm" >

so here are the some common and important property which we can use for our devlopmnet purpose like.

userName.value --> which will give input value.
userName.touch / userName.untouch --> which tell about is input box has been toched or not using boolean value.
userName.dirty --> will tell if usename has been interacted by user or not using boolean value.
userName.errors --> which will help to track any validation error from this error object.
username.pristine --> which will tells the usename input has been modified or not by the user, using boolean value.
username.valid / username.invalid --> which will tell the ussername input is valid or invalid, based on boolean value 

in the same way we have same property for form level, which track complete form.

userForm.value --> which will give form value.
userForm.touch / userName.untouch --> which tell about is formhas been toched or not using boolean value.
userForm.dirty --> will tell if form has been interacted by user or not using boolean value.
userForm.errors --> which will help to track any validation error from this error object (on form level).
userForm.pristine --> which will tells the forms has been modified or not by the user, using boolean value.
userForm.valid / username.invalid --> which will tell the form  is valid or invalid, based on boolean value 

these property are common becasue all the the input controls and forms are inherit  `AbstractControl` class which give these all the property.
https://angular.io/api/forms/AbstractControl

common usecases whih can be achived using above property
-----------
1) validation form , and individula input control element
2) form submit button enable disabled based on form valid invalid etc etc

*/


6 select option rendering, and ngValue
=====================================
create a new interface for Baggage

model\baggage.interface.ts
---------------------
export interface Baggage {
  key: string;
  value: string;
}


passenger-form.component.ts
--------------------------
import { Component, Input } from '@angular/core';
import { Baggage } from '../../model/baggage.interface';
import { Passengers } from '../../model/passenger.interface';

@Component({
  selector: 'passenger-form',
  styleUrls: ['./passenger-form.component.css'],
  template: `<div>
    <div>
      {{ detail | json }}
      <form #form="ngForm" (click)="test(form)">
        <div>
          <input type="text" name="fullname" [ngModel]="'sssssssss'" />
        </div>
        <div>
          <input type="number" name="id" [ngModel]="detail?.id" />
        </div>

        <!--
        <div>
          <label>
            Yes
            <input
              type="radio"
              name="checkedIn"
              [value]="true"
              [ngModel]="detail?.checkedIn"
              (ngModelChange)="toggleCheckedIn($event)"
            />
          </label>

          <label>
            No
            <input
              type="radio"
              name="checkedIn"
              [value]="false"
              [ngModel]="detail?.checkedIn"
              (ngModelChange)="toggleCheckedIn($event)"
          /></label>
        </div>  -->

        <div>
          <input
            type="checkbox"
            name="checkedIn"
            [ngModel]="detail?.checkedIn"
            (ngModelChange)="toggleCheckedIn($event)"
          />
        </div>

        <div *ngIf="form.value.checkedIn">
          <input
            type="text"
            name="checkInDate"
            [ngModel]="detail?.checkInDate"
          />
        </div>

        <div>    <----- make select box there wth dynamc option
          Luggage:
          <select name="baggage" [ngModel]="detail?.baggage">
            <option *ngFor="let item of baggage" [value]="item.key">
              {{ item.value }}
            </option>
          </select>
        </div>

        {{ form.value | json }}
      </form>
    </div>
  </div>`,
})
export class PassengerFormComponent {
  @Input()
  detail: Passengers;

  baggage: Baggage[] = [   <----- add the baggage to show ption
    { 
      key: 'none',
      value: 'No baggage',
    },
    {
      key: 'hand-only',
      value: 'Hand baggage',
    },
    {
      key: 'hold-only',
      value: 'Hold baggage',
    },
    {
      key: 'hand-hold',
      value: 'Hand and hold baggage',
    },
  ];

  test(value) {
    console.log(value);
  }

  toggleCheckedIn(value) {
    console.log(value);
    this.detail.checkInDate = Date.now();
  }
}


7 Form validation and error states
=================================
import { Component, Input } from '@angular/core';
import { Baggage } from '../../model/baggage.interface';
import { Passengers } from '../../model/passenger.interface';

@Component({
  selector: 'passenger-form',
  styleUrls: ['./passenger-form.component.css'],
  template: `<div>
    <div>
      {{ detail | json }}
      <form #form="ngForm">
        <div>
          <input
            type="text"
            name="fullname"
            [ngModel]="detail?.fullname"
            #userName="ngModel"
            required
          />
          <div
            *ngIf="userName.errors?.['required'] && userName.dirty"
            class="error"
          >
            Passenger name is required
          </div>
          {{ userName.errors | json }}
        </div>
        <div>
          <input
            type="number"
            name="id"
            #id="ngModel"
            [ngModel]="detail?.id"
            required
          />
          <div *ngIf="id.errors?.['required'] && id.dirty" class="error">
            Passenger ID is required
          </div>
          {{ id.errors | json }}
        </div>

        <!--
        <div>
          <label>
            Yes
            <input
              type="radio"
              name="checkedIn"
              [value]="true"
              [ngModel]="detail?.checkedIn"
              (ngModelChange)="toggleCheckedIn($event)"
            />
          </label>

          <label>
            No
            <input
              type="radio"
              name="checkedIn"
              [value]="false"
              [ngModel]="detail?.checkedIn"
              (ngModelChange)="toggleCheckedIn($event)"
          /></label>
        </div>  -->

        <div>
          <input
            type="checkbox"
            name="checkedIn"
            [ngModel]="detail?.checkedIn"
            (ngModelChange)="toggleCheckedIn($event)"
          />
        </div>

        <div *ngIf="form.value.checkedIn">
          <input
            type="text"
            name="checkInDate"
            [ngModel]="detail?.checkInDate"
          />
        </div>

        <div>
          Luggage:
          <select name="baggage" [ngModel]="detail?.baggage">
            <option *ngFor="let item of baggage" [value]="item.key">
              {{ item.value }}
            </option>
          </select>
        </div>

        <div>{{ form.value | json }}</div>
        <div>Valid: {{ form.valid | json }}</div>
        <div>Invalid: {{ form.invalid | json }}</div>
      </form>
    </div>
  </div>`,
})
export class PassengerFormComponent {
  @Input()
  detail: Passengers;

  baggage: Baggage[] = [
    {
      key: 'none',
      value: 'No baggage',
    },
    {
      key: 'hand-only',
      value: 'Hand baggage',
    },
    {
      key: 'hold-only',
      value: 'Hold baggage',
    },
    {
      key: 'hand-hold',
      value: 'Hand and hold baggage',
    },
  ];

  test(value) {
    console.log(value);
  }

  toggleCheckedIn(value) {
    console.log(value);
    this.detail.checkInDate = Date.now();
  }
}

8 Dynamically disabling submit
==============================

passenger-form.component.ts
-----------------------------

import { Component, Input } from '@angular/core';
import { Baggage } from '../../model/baggage.interface';
import { Passengers } from '../../model/passenger.interface';

@Component({
  selector: 'passenger-form',
  styleUrls: ['./passenger-form.component.css'],
  template: `<div>
    <div>
      {{ detail | json }}
      <form #form="ngForm">
        <div>
          <input
            type="text"
            name="fullname"
            [ngModel]="detail?.fullname"
            #userName="ngModel"
            required
          />
          <div
            *ngIf="userName.errors?.['required'] && userName.dirty"
            class="error"
          >
            Passenger name is required
          </div>
          {{ userName.errors | json }}
        </div>
        <div>
          <input
            type="number"
            name="id"
            #id="ngModel"
            [ngModel]="detail?.id"
            required
          />
          <div *ngIf="id.errors?.['required'] && id.dirty" class="error">
            Passenger ID is required
          </div>
          {{ id.errors | json }}
        </div>

        <!--
        <div>
          <label>
            Yes
            <input
              type="radio"
              name="checkedIn"
              [value]="true"
              [ngModel]="detail?.checkedIn"
              (ngModelChange)="toggleCheckedIn($event)"
            />
          </label>

          <label>
            No
            <input
              type="radio"
              name="checkedIn"
              [value]="false"
              [ngModel]="detail?.checkedIn"
              (ngModelChange)="toggleCheckedIn($event)"
          /></label>
        </div>  -->

        <div>
          <input
            type="checkbox"
            name="checkedIn"
            [ngModel]="detail?.checkedIn"
            (ngModelChange)="toggleCheckedIn($event)"
          />
        </div>

        <div *ngIf="form.value.checkedIn">
          <input
            type="text"
            name="checkInDate"
            [ngModel]="detail?.checkInDate"
          />
        </div>

        <div>
          Luggage:
          <select name="baggage" [ngModel]="detail?.baggage">
            <option *ngFor="let item of baggage" [value]="item.key">
              {{ item.value }}
            </option>
          </select>
        </div>

        <div>{{ form.value | json }}</div>
        <div>Valid: {{ form.valid | json }}</div>
        <div>Invalid: {{ form.invalid | json }}</div>

        <button type="submit" [disabled]="form.invalid">
          Update passenger
        </button>
      </form>
    </div>
  </div>`,
})
export class PassengerFormComponent {
  @Input()
  detail: Passengers;

  baggage: Baggage[] = [
    {
      key: 'none',
      value: 'No baggage',
    },
    {
      key: 'hand-only',
      value: 'Hand baggage',
    },
    {
      key: 'hold-only',
      value: 'Hold baggage',
    },
    {
      key: 'hand-hold',
      value: 'Hand and hold baggage',
    },
  ];

  test(value) {
    console.log(value);
  }

  toggleCheckedIn(value) {
    console.log(value);
    this.detail.checkInDate = Date.now();
  }
}


passenger-form.component.css
-----------------------------
div {
  margin: 0 0 20px;
}
.error {
  color: #da6969;
  font-size: 10px;
}

button[disabled] {
  opacity: 0.5;
  cursor: not-allowed;
}



9 ngSubmit and stateless @Output
==================================
passenger-form.component.ts
------------------------------
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { Baggage } from '../../model/baggage.interface';
import { Passengers } from '../../model/passenger.interface';

@Component({
  selector: 'passenger-form',
  styleUrls: ['./passenger-form.component.css'],
  template: `<div>
    <div>
      {{ detail | json }}
      <form #form="ngForm" (ngSubmit)="handleSubmit(form.value, form.valid)">
        <div>
          <input
            type="text"
            name="fullname"
            [ngModel]="detail?.fullname"
            #userName="ngModel"
            required
          />
          <div
            *ngIf="userName.errors?.['required'] && userName.dirty"
            class="error"
          >
            Passenger name is required
          </div>
          {{ userName.errors | json }}
        </div>
        <div>
          <input
            type="number"
            name="id"
            #id="ngModel"
            [ngModel]="detail?.id"
            required
          />
          <div *ngIf="id.errors?.['required'] && id.dirty" class="error">
            Passenger ID is required
          </div>
          {{ id.errors | json }}
        </div>

        <!--
        <div>
          <label>
            Yes
            <input
              type="radio"
              name="checkedIn"
              [value]="true"
              [ngModel]="detail?.checkedIn"
              (ngModelChange)="toggleCheckedIn($event)"
            />
          </label>

          <label>
            No
            <input
              type="radio"
              name="checkedIn"
              [value]="false"
              [ngModel]="detail?.checkedIn"
              (ngModelChange)="toggleCheckedIn($event)"
          /></label>
        </div>  -->

        <div>
          <input
            type="checkbox"
            name="checkedIn"
            [ngModel]="detail?.checkedIn"
            (ngModelChange)="toggleCheckedIn($event)"
          />
        </div>

        <div *ngIf="form.value.checkedIn">
          <input
            type="text"
            name="checkInDate"
            [ngModel]="detail?.checkInDate"
          />
        </div>

        <div>
          Luggage:
          <select name="baggage" [ngModel]="detail?.baggage">
            <option *ngFor="let item of baggage" [value]="item.key">
              {{ item.value }}
            </option>
          </select>
        </div>

        <div>{{ form.value | json }}</div>
        <div>Valid: {{ form.valid | json }}</div>
        <div>Invalid: {{ form.invalid | json }}</div>

        <button type="submit" [disabled]="form.invalid">
          Update passenger
        </button>
      </form>
    </div>
  </div>`,
})
export class PassengerFormComponent {
  @Input()
  detail: Passengers;

  @Output()
  onUpdate: EventEmitter<Passengers> = new EventEmitter<Passengers>();

  baggage: Baggage[] = [
    {
      key: 'none',
      value: 'No baggage',
    },
    {
      key: 'hand-only',
      value: 'Hand baggage',
    },
    {
      key: 'hold-only',
      value: 'Hold baggage',
    },
    {
      key: 'hand-hold',
      value: 'Hand and hold baggage',
    },
  ];

  test(value) {
    console.log(value);
  }

  toggleCheckedIn(value) {
    console.log(value);
    this.detail.checkInDate = Date.now();
  }

  handleSubmit(passenger: Passengers, isValid: boolean) {
    debugger;
    if (isValid) {
      this.onUpdate.emit(passenger);
    }
  }
}


passenger-viewer.component.ts
---------------------------
import { Component, OnInit } from '@angular/core';
import { Passengers } from '../../model/passenger.interface';
import { PassengerDashboardService } from '../../passenger-dashboard.service';

@Component({
  selector: 'passenger-viewer',
  styleUrls: ['./passenger-viewer.component.css'],
  template: `
    <div>
      <passenger-form
        [detail]="passenger"
        (onUpdate)="onUpdatePassenger($event)"
      ></passenger-form>
    </div>
  `,
})
export class PassengerViewerComponent implements OnInit {
  constructor(private passengerService: PassengerDashboardService) {}
  passenger: Passengers;

  ngOnInit() {
    this.passengerService.getPassenger(1).subscribe((data: Passengers) => {
      this.passenger = data;
    });
  }

  onUpdatePassenger(event: Passengers) {
    debugger;
    this.passengerService
      .updatePassenger(event)
      .subscribe((data: Passengers) => {
        this.passenger = Object.assign({}, this.passenger, event);
      });
  }
}


*******************Component Routing********************

1 Base href and RouterModule
==============================
one thing always remember in your index.html  , this line should be present  <base href="/" /> , you can see this is there , but if you remove your routing wont work.

so when its come to work with Routing, you need to import RouterModule module in your app.


app.module.ts
--------------
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { BrowserModule } from '@angular/platform-browser';
import { RouterModule } from '@angular/router';   <--- Added RouterModule 
import { AppComponent } from './app.component';

// custom module
import { PassengerDashboardModule } from './passenger-dashboard/passenger-dashboard.module';

@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, FormsModule, PassengerDashboardModule],
  bootstrap: [AppComponent],
})
export class AppModule {}


2 Root module routes and outlet
==============================
A) so we have seen we imported RouterModule in our module , but there we have not put till now in the import array , because this is not very straight forward like others. 

B) Make routing defination you can make in app module , or you can make seprate module to make routing defination . amd import routing defination module to in your main module. so what is routing defination , here you will define , which component will be loaded based on url fragment. if your url fragment is empty string '', means this is a home application root location , so this defination is a array of object.

C) // Routing defination 
const Routes: Route[] = [
  { path: '', component: HomeComponent, pathMatch: 'full' },   
];

D) once routing defination is done we have to pass this defination objec in the RouterModule.forRoot(Routes) , in the module section in import array. 
RouterModule.forRoot() , always remember for root level means app module we always use a forRoot() , and for feature module level we always use RouterModule.forChild().

E) and after above 4 steps , we have to provide <router-outlet> </router-outlet> in our app component which will tell to the application , routing will start beneath of this tag.

in our application , every feature module contains diffrent <router-outlet> </router-outlet> . as per their child route defination


create a new component  --> src\app\home.component.ts

home.component.ts
----------------------
import { Component } from '@angular/core';

@Component({
  selector: 'app-home',
  template: ` <div><h1>Air Passenger Dashboard</h1></div> `,
})
export class HomeComponent {}


app.module.ts
--------------
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { BrowserModule } from '@angular/platform-browser';
import { Route, RouterModule } from '@angular/router';
import { AppComponent } from './app.component';
import { HomeComponent } from './home.component';

// custom module
import { PassengerDashboardModule } from './passenger-dashboard/passenger-dashboard.module';

// Routing defination 
//here you are saying , if apath is root level then , load a home component , and the path would be exact path.
const Routes: Route[] = [
  { path: '', component: HomeComponent, pathMatch: 'full' },   
];

@NgModule({
  declarations: [AppComponent, HomeComponent],
  imports: [
    BrowserModule,
    FormsModule,
    PassengerDashboardModule,
    RouterModule.forRoot(Routes), <---- give the routing defination there
  ],
  bootstrap: [AppComponent],
})
export class AppModule {}


app.component.ts
---------------
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div>
      <!-- our application start from here -->
      <!-- <passenger-dashboard></passenger-dashboard> -->
      <!--  <passenger-viewer></passenger-viewer> -->
      <router-outlet></router-outlet>            <--- so here we commented above exported component , and use <router-outlet> tag and beaneatgh of this our routing will start
    </div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {}



3 Wildcard routes for 404 handling (wild card path **)
========================================================
suppose if our route path does not match , that is called wild card routing , and we mntion for that '**' , so its meaning  our defined component will be appeared,

create a new component ---> src\app\not-found.component.ts

not-found.component.ts
------------------------
import { Component } from '@angular/core';

@Component({
  selector: 'app-not-found',
  template: ` <div><h1>Sorry your page is not found !!!</h1></div> `,
})
export class NotFoundComponent {}


app.module.ts
--------------
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { BrowserModule } from '@angular/platform-browser';
import { Route, RouterModule } from '@angular/router';
import { AppComponent } from './app.component';
import { HomeComponent } from './home.component';
import { NotFoundComponent } from './not-found.component';

// custom module
import { PassengerDashboardModule } from './passenger-dashboard/passenger-dashboard.module';

const Routes: Route[] = [
  { path: '', component: HomeComponent, pathMatch: 'full' },
  { path: '**', component: NotFoundComponent },  <--- it means when path not found , our NotFoundComponent, component will be loaded
];

@NgModule({
  declarations: [AppComponent, HomeComponent, NotFoundComponent],
  imports: [
    BrowserModule,
    FormsModule,
    PassengerDashboardModule,
    RouterModule.forRoot(Routes),
  ],
  bootstrap: [AppComponent],
})
export class AppModule {}


4 routerlink
--------------
We know user can navigate in website using two way , first one he , can direcyly hit the url , here routermodule recgnized any route defination your component will be shown, and another way we can navigate website from link which is avaibale on web page which will change the fragment and our routing will work again .
so here we dont put only anchor tag and href , because our page will be refreshed , and we work in the single page application , so ere we use routerLink directive with the anchor tag, and dont use the href.

ex:- <a routerLink="/">Go Home </a>  --> so here w ill give href link ro routerLink.


app.component.ts
---------------
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div>
      <!-- our application start from here -->
      <!-- <passenger-dashboard></passenger-dashboard> -->
      <!--  <passenger-viewer></passenger-viewer> -->
      <nav>
        <a routerLink="/">Home</a> |     <---- we create a link with RouterLink directive
        <a routerLink="/oops">404</a>    <---- we create a link with RouterLink directive
      </nav>
      <router-outlet></router-outlet>
    </div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {}


not-found.componenet.ts
---------------------
import { Component } from '@angular/core';

@Component({
  selector: 'app-not-found',
  template: `
    <div>
      <h1>
        Sorry your page is not found !!! want to go
        <a routerLink="/"> home ? </a>    <---- we updated here as well
      </h1>
    </div>
  `,
})
export class NotFoundComponent {}


5 Styling active routes
=========================
so we have seen routerLink directive which we can use along with anchor tag, we have two more directive which we can use with anchor tag

A) routerLink --> this work like href but without refresh page
B) routerLinkActive --> so whenever link is activate or clicked routerLinkActive directiveapply the class which we have passed, in our example case it will apply active classs whechever link is clicked.
3) routerLinkActiveOptions --> takes a   { exact: true } , to match the exact href link (routerLink) , suppose in below example we dont apply { exact: true } and we go to /oops , our active class will be applicable to 404 , as well Home , because home link condition is also satisffied , so we have to make sure this should check complete  exact url.

 <a
  routerLink="/"
  routerLinkActive="active"
  [routerLinkActiveOptions]="{ exact: true }"
  >Home</a
>

<a routerLink="/oops" routerLinkActive="active">404</a>


app.component.ts
-------------------
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div>
      <!-- our application start from here -->
      <!-- <passenger-dashboard></passenger-dashboard> -->
      <!--  <passenger-viewer></passenger-viewer> -->
      <nav class="nav">
        <a
          routerLink="/"
          routerLinkActive="active"
          [routerLinkActiveOptions]="{ exact: true }"     <-- added all three directive here in the a link.
          >Home</a
        >
        |
        <a routerLink="/oops" routerLinkActive="active">404</a>
      </nav>
      <router-outlet></router-outlet>
    </div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {}


app.component.css
-----------------
.nav {
  margin: 0 0 10px;
  padding: 0 0 20px;
  border-bottom: 1px solid #dce5f2;
}

a {
  background: #3a4250;
  color: #fff;
  padding: 4px 10px;
  margin: 0 2px;
  border-radius: 2px;
}

a.active {
  color: #b690f1;
  background: #363c48;
}


6 Dynamic navigation with ngFor
=============================
here we can take advantage of ngFor , and create our structure array form , so that we can iterate them using *ngFOr ,and in future we can add more link into them.


import { Component } from '@angular/core';

interface Nav {
  link: string;
  name: string;
  exact: boolean;
}

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div>
      <!-- our application start from here -->
      <!-- <passenger-dashboard></passenger-dashboard> -->
      <!--  <passenger-viewer></passenger-viewer> -->
      <nav class="nav">
        <a
          *ngFor="let item of nav"
          [routerLink]="item.link"
          routerLinkActive="active"
          [routerLinkActiveOptions]="{ exact: item.exact }"
          >{{ item.name }}</a
        >
      </nav>
      <router-outlet></router-outlet>
    </div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {
  nav: Nav[] = [
    {
      link: '/',
      name: 'Home',
      exact: true,
    },
    {
      link: '/oops',
      name: '404',
      exact: false,
    },
  ];
}


7 Feature-module routes with forChild()
========================================
Like every root module , we can add routing for child module or feature module , for that we have to do the same process , like add RouterModule , and imprt it with routes defination , but remember we could have multiple `RouterModule.forChild()` with eavery feature or child odule , but would have always only one for root module.


passenger-dashboard.module.ts
------------------------------------
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { HttpClientModule } from '@angular/common/http';
import { FormsModule } from '@angular/forms';
import { Route, RouterModule } from '@angular/router';

// container/ smart/ presentational
import { PassengerDashboardComponent } from './container/passenger-dashboard/passenger-dashboard.component';
import { PassengerViewerComponent } from './container/passenger-viewer/passenger-viewer.component';

// dumb component
import { PassengerCountComponent } from './components/passenger-count/passenger-count.component';
import { PassengerDetailComponent } from './components/passenger-details/passenger-detail.component';
import { PassengerFormComponent } from './components/passenger-form/passenger-form.component';

import { PassengerDashboardService } from './passenger-dashboard.service';

const routes: Route[] = [
  { path: 'passengers', component: PassengerDashboardComponent },
];

@NgModule({
  declarations: [
    // container/ smart component
    PassengerDashboardComponent,
    PassengerViewerComponent,
    // dumb component
    PassengerCountComponent,
    PassengerDetailComponent,
    PassengerFormComponent,
  ],
  imports: [
    BrowserModule,
    HttpClientModule,
    FormsModule,
    RouterModule.forChild(routes),  <--- added router module with feature module alng with Route definations
  ],
  
// <--- we have remove  this exports , becasue we wont show manually , not this component, will be shown based on routing , and this will be handled by RouterModule.

  //exports: [PassengerDashboardComponent, PassengerViewerComponent], 
  //providers: [PassengerDashboardService],
})
export class PassengerDashboardModule {}


app.component.ts
-----------------------
we have enabled routig through , in case we type in browser , now we are going to give anchor link for user so he can navigate to this page using click that.

import { Component } from '@angular/core';

interface Nav {
  link: string;
  name: string;
  exact: boolean;
}

@Component({
  selector: 'app-root',
  styleUrls: ['./app.component.css'],
  template: `
    <div>
      <!-- our application start from here -->
      <!-- <passenger-dashboard></passenger-dashboard> -->
      <!--  <passenger-viewer></passenger-viewer> -->
      <nav class="nav">
        <a
          *ngFor="let item of nav"
          [routerLink]="item.link"
          routerLinkActive="active"
          [routerLinkActiveOptions]="{ exact: item.exact }"
          >{{ item.name }}</a
        >
      </nav>
      <router-outlet></router-outlet>
    </div>
  `,
  // templateUrl: './app.component.html',
})
export class AppComponent {
  nav: Nav[] = [
    {
      link: '/',
      name: 'Home',
      exact: true,
    },
    {                            <----- here we added , one more anchor link for /passenger  fragment.
      link: '/passengers',
      name: 'Passengers',
      exact: true,
    },
    {
      link: '/oops',
      name: '404',
      exact: false,
    },
  ];
}

8 Child and dynamic routes using route param or parameter
======================================================
till now we have added routing defination straight forward , now we will she how we  can use child routes defination or child routes with route param.
so for example what if

http://localhost:4200/ ---> root

http://localhost:4200/passengers  --> passenger component

http://localhost:4200/something/fragment  --> so here is fragment is not child  this is complete one fragment `something/fragment`


so what is child and what is route parameter
********************************************
http://localhost:4200/passengers/1 --> so you can see there 1 , and this can be changed every time and based on this parameter we can show diffrent diffrent component so after passenger these are routeparam , and we write like this

so here you can see :passengerID (in below code) is the route parameter which we mentioned with collon  and now this is child there. 

http://localhost:4200/passengers/1 ---> will get passengerID here 1
http://localhost:4200/passengers/2 ---> will get passengerID here 2
http://localhost:4200/passengers/something ---> will get passengerID here something

so this value will be changed , and we will be applying logic based on this dynamic route parameter.

const routes: Route[] = [
  {
    path: 'passengers',

    children: [
      { path: '', component: PassengerDashboardComponent },
      { path: ':passengerID', component: PassengerViewerComponent },  
    ],

    /* not valid in case you have route parameter , because if ypu keep PassengerDashboardComponent seprtae
      your child parameter component will never, be shown always PassengerDashboardComponent component 
      will be shown, so make this component inside the children with '' empty path
    */
    //component: PassengerDashboardComponent,
  },
];

passenger-dashboard.module.ts
-----------------------------
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { HttpClientModule } from '@angular/common/http';
import { FormsModule } from '@angular/forms';
import { Route, RouterModule } from '@angular/router';

// container/ smart/ presentational
import { PassengerDashboardComponent } from './container/passenger-dashboard/passenger-dashboard.component';
import { PassengerViewerComponent } from './container/passenger-viewer/passenger-viewer.component';

// dumb component
import { PassengerCountComponent } from './components/passenger-count/passenger-count.component';
import { PassengerDetailComponent } from './components/passenger-details/passenger-detail.component';
import { PassengerFormComponent } from './components/passenger-form/passenger-form.component';

import { PassengerDashboardService } from './passenger-dashboard.service';

const routes: Route[] = [
  {
    path: 'passengers',

    children: [
      { path: '', component: PassengerDashboardComponent },
      { path: ':passengerID', component: PassengerViewerComponent },
    ],

    /* not valid in case you have route parameter , because if ypu keep PassengerDashboardComponent seprtae
      your child parameter component will never, be shown always PassengerDashboardComponent component 
      will be shown, so make this component inside the children with '' empty path
    */
    //component: PassengerDashboardComponent,
  },
];

@NgModule({
  declarations: [
    // container/ smart component
    PassengerDashboardComponent,
    PassengerViewerComponent,
    // dumb component
    PassengerCountComponent,
    PassengerDetailComponent,
    PassengerFormComponent,
  ],
  imports: [
    BrowserModule,
    HttpClientModule,
    FormsModule,
    RouterModule.forChild(routes),
  ],
  //exports: [PassengerDashboardComponent, PassengerViewerComponent],
  //providers: [PassengerDashboardService],
})
export class PassengerDashboardModule {}


9 Access Route params, data-fetching 
==========================================
So how we can get the route param in agular , so we have ActivatedRoute service , which is coming from Router module we can inject this in our constructor , and use it , so in this class we have params property, which gives us a route parameter, always remember inside ActivatedRoute service all the property is observable types so if we need the data we have to subscribe them, so here we will subscribe the activatedRoute.params property.


import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';          <--- imported  ActivatedRoute service
import { Passengers } from '../../model/passenger.interface';
import { PassengerDashboardService } from '../../passenger-dashboard.service';

import { switchMap } from 'rxjs/operators';

@Component({
  selector: 'passenger-viewer',
  styleUrls: ['./passenger-viewer.component.css'],
  template: `
    <div>
      <passenger-form
        [detail]="passenger"
        (onUpdate)="onUpdatehandler($event)"
      ></passenger-form>
    </div>
  `,
})
export class PassengerViewerComponent implements OnInit {
  constructor(
    private passengerService: PassengerDashboardService,
    private activatedRoute: ActivatedRoute
  ) {}
  passenger: Passengers;

  ngOnInit() { 
    this.activatedRoute.params.subscribe((data) => {           <--- we subscribed activatedRoute.params property to get route parameter data 
      // console.log(data);
      this.passengerService
        .getPassenger(data['passengerID'])     <--- and we used that data here to fetch perticular pessenger
        .subscribe((data: Passengers) => {
          this.passenger = data;
        });
    });


  onUpdatehandler(value: Passengers) {
    this.passengerService
      .updatePassenger(value)
      .subscribe((data: Passengers) => {
        this.passenger = data;
      });
  }
}

10 Imperative routing API
============================
passenger-viewer.component.ts
------------------------------

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { Passengers } from '../../model/passenger.interface';
import { PassengerDashboardService } from '../../passenger-dashboard.service';

@Component({
  selector: 'passenger-viewer',
  styleUrls: ['./passenger-viewer.component.css'],
  template: `
    <div>
      <button (click)="goBack()">&lsaquo; Go Back</button>
      <passenger-form
        [detail]="passenger"
        (onUpdate)="onUpdatehandler($event)"
      ></passenger-form>
    </div>
  `,
})
export class PassengerViewerComponent implements OnInit {
  constructor(
    private passengerService: PassengerDashboardService,
    private activatedRoute: ActivatedRoute,
    private router: Router   <--- inserted or injected Router for the imperative routing
  ) {}
  passenger: Passengers;

  ngOnInit() {
    this.activatedRoute.params.subscribe((data) => {
      console.log(data);

      this.passengerService
        .getPassenger(data['passengerId'])
        .subscribe((data: Passengers) => {
          this.passenger = data;
        });
    });

    // this.passengerService.getPassenger(1).subscribe((data: Passengers) => {
    //   this.passenger = data;
    // });
  }

  onUpdatehandler(value: Passengers) {
    this.passengerService
      .updatePassenger(value)
      .subscribe((data: Passengers) => {
        this.passenger = data;
      });
  }

  goBack() {
    this.router.navigate(['/passenger']);  <-- used navigate method for navigate the page , we have to pass the url shape in array.
  }
}



passenger-detail.component.ts
--------------------------------
import {
  Component,
  Input,
  Output,
  EventEmitter,
  OnInit,
  OnChanges,
} from '@angular/core';
import { Passengers } from '../../model/passenger.interface';

@Component({
  selector: 'passenger-detail',
  styleUrls: ['./passenger-detail.component.css'],
  template: `<div>
    <span class="status" [class.checked-in]="detail.checkedIn"></span>

    <div>
      <input
        *ngIf="editing"
        type="text"
        [value]="detail.fullname"
        #name
        (input)="onNameChange(name.value)"
      />
    </div>

    <div *ngIf="!editing">{{ detail.fullname }}</div>

    <div class="date">
      {{
        detail.checkInDate
          ? (detail.checkInDate | date: 'yMMMMd' | uppercase)
          : 'not checked in'
      }}
    </div>

    <button (click)="toggleEdit()">{{ editing ? 'Done' : 'Edit' }}</button>
    <button (click)="onRemove()">Remove</button>
    <button (click)="goToPassenger()">View Passenger</button>  <-- created a button for navigare
  </div>`,
})
export class PassengerDetailComponent implements OnInit, OnChanges {
  @Input()
  detail: Passengers;

  @Output()
  onEdit = new EventEmitter();

  @Output()
  onDelete = new EventEmitter();

  @Output()
  onView = new EventEmitter();  <-- created a new event for view
 
  editing: boolean = false;

  ngOnInit(): void {
    //console.log('ngOnInit()');
  }

  ngOnChanges(changes: any): void {
    this.detail = { ...changes.detail.currentValue };
  }

  onNameChange(value: string) {
    this.detail.fullname = value;
  }

  toggleEdit() {
    if (this.editing) {
      this.onEdit.emit(this.detail);
    }

    this.editing = !this.editing;
  }

  onRemove() {
    this.onDelete.emit(this.detail);
  }

  goToPassenger() {
    this.onView.emit(this.detail);   <-- emitting the passenger.
}



passenger-dashboard\passenger-dashboard.component.ts
-----------------------------------------------------

import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { Passengers } from '../../model/passenger.interface';
import { PassengerDashboardService } from '../../passenger-dashboard.service';

@Component({
  selector: 'passenger-dashboard',
  styleUrls: ['./passenger-dashboard.component.css'],
  template: `
    <div>
      <passenger-count [items]="passengers"></passenger-count>

      <passenger-detail
        *ngFor="let passenger of passengers"
        [detail]="passenger"
        (onEdit)="onEditHandler($event)"
        (onDelete)="onDeleteHandler($event)"
        (onView)="onViewHandler($event)"   <-- register new custom event from Passenger-detail component
      >
      </passenger-detail>
    </div>
  `,
})
export class PassengerDashboardComponent implements OnInit {
  passengers: Passengers[] = [];
  constructor(
    private passengerDashboardService: PassengerDashboardService,
    private router: Router  <-- injected the Router
  ) {}

  ngOnInit() {
    this.passengerDashboardService
      .getPassengers()
      .subscribe((data: Passengers[]) => {
        this.passengers = data;
      });
  }

  onEditHandler(event: Passengers) {
    this.passengerDashboardService.updatePassenger(event).subscribe((data) => {
      console.log(data);
      this.passengers = this.passengers.map((passenger) => {
        if (passenger.id === event.id) {
          passenger = { ...event };
        }
        return passenger;
      });
    });
  }

  onDeleteHandler(event: Passengers) {
    this.passengerDashboardService.removePassenger(event).subscribe((data) => {
      this.passengers = this.passengers.filter((passenger) => {
        return passenger.id !== event.id;
      });
    });
  }

  onViewHandler(event: Passengers) {
    this.router.navigate(['/', 'passenger', event.id]); <-- navigate to actual url tree
  }
}


11 Applying redirects
======================
so we can ask angular straight forward , if its maching some certian path then it redirect to perticular component , here when our application will load it will automatically redirect to passenger , we can use this wild card routing , and other places ,  pathMatch: 'full' property is required for it.

{ path: '', redirectTo: '/passenger', pathMatch: 'full' },

app.module.ts
--------------

import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';
import { Route, RouterModule } from '@angular/router';
import { HomeComponent } from './home.component';

// custom module
import { PassengerDashboardModule } from './passenger-dashboard/passenger-dashboard.module';
import { NotFoundComponent } from './not-found.component';

// http://localhost:4200/
const route: Route[] = [
  // { path: '', component: HomeComponent },
  { path: '', redirectTo: '/passenger', pathMatch: 'full' },  <-- applied redirect , and commnet
  { path: '**', component: NotFoundComponent },
];

@NgModule({
  declarations: [AppComponent, HomeComponent, NotFoundComponent],
  imports: [
    BrowserModule,
    FormsModule,
    PassengerDashboardModule,
    RouterModule.forRoot(route),
  ],
  bootstrap: [AppComponent],
})
export class AppModule {}

/*
// component imnformation
  declarations: [AppComponent],

// other modules information  
  imports: [BrowserModule],
*/



*************************************Angular Advance*************************

********************************1 Custom Pipes**********************

1 Creating a custom pipe
=========================
You can create your own custom pipe for data transformation.

src\app\custom-pipe\filesize.component.ts
---------------------------------------
import { Component, OnInit } from '@angular/core';

interface File {
  name: string;
  size: number;
  type: string;
}

@Component({
  selector: 'file-size',
  template: `
    <div>
      <div *ngFor="let file of files">
        <p>{{ file.name }}</p>
        <p>
          <strong>{{ file.size | filesize: 'Megabite' }}</strong>
        </p>
      </div>
    </div>
  `,
})
export class FileSizeComponent implements OnInit {
  files: File[];
  ngOnInit() {
    this.files = [
      { name: 'logo.svg', size: 2120109, type: 'image/svg' },
      { name: 'banner.jpg', size: 18029, type: 'image/jpg' },
      { name: 'background.png', size: 1784562, type: 'image/png' },
    ];
  }
}


src\app\custom-pipe\filesize.pipe.ts
------------------------------------
import { Component, OnInit } from '@angular/core';

// import pipe decorator and PipeTransform interface
import { Pipe, PipeTransform } from '@angular/core';   

@Pipe({ name: 'Filesize' })
export class FileSizePipe implements PipeTransform {
  transform(value: any, size = 'mb') {   <--- implement  transform method to transsfer each data
    const convertToMB = value / 1024 / 1024;
    return convertToMB.toFixed(2) + size;
  }
}


// app.module.ts
------------------
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';
import { Route, RouterModule } from '@angular/router';
import { HomeComponent } from './home.component';

// custom module
import { PassengerDashboardModule } from './passenger-dashboard/passenger-dashboard.module';
import { NotFoundComponent } from './not-found.component';
import { FileSizeComponent } from './custom-pipe/filesize.component';
import { FileSizePipe } from './custom-pipe/filesize.pipe'; 

// http://localhost:4200/
const route: Route[] = [
  { path: '', component: HomeComponent },
  // { path: '', redirectTo: '/passenger', pathMatch: 'full' },
  { path: 'custom-pipe', component: FileSizeComponent },
  { path: '**', component: NotFoundComponent },
];

@NgModule({
  declarations: [
    AppComponent,
    HomeComponent,
    NotFoundComponent,
    FileSizeComponent,
    FileSizePipe,  <--- include all pipe, component and directive here
  ],
  imports: [
    BrowserModule,
    FormsModule,
    PassengerDashboardModule,
    RouterModule.forRoot(route),
  ],
  bootstrap: [AppComponent],
})
export class AppModule {}



/*
way of routing ( declarative routing v/s imperative routing)
************************************************************
There are two ways of two achive routing (means change the url).

A) declarative template based navigation with the routerLink directive
----------------------
As we have included RouterModule in our app, we can use the routerLink directive to define router navigation links in our template. which we have done in above example. We can either hardcode a string directly in the template, like its the case of the home route or the courses route. But we can also pass it an expression. If so we need to pass it an array containing the multiple URL path parts that we want to navigate to: in this case we want to navigate to the /lessons path.

B) programmatic or imperative navigation with the Router API.
------------------------------------------------------------
Another way of doing router navigation is to use the router programmatic API to do so. For that we just have to inject the router into our component, and make use of either the navigate or navigateByUrl navigation methods, which we will see in this example.


In Angular, RouterLink is a directive for navigating to a different route declaratively. Router.navigate and Router.navigateByURL are two methods available to the Router class to navigate imperatively in your component classes.

Using RouterLink (declrative way)
----------------
A typical link in HTML looks like this:

This example link will direct the user to the /example page.

`
<a href="/example">
  Example HTML link.
</a>
`

However, a single page application (SPA) does not have different pages to link to. Instead, it has different views to display to the user. To allow a user to navigate and change the view, you will want to use the RouterLink directive instead of href:
`
<a routerLink="/users/sammy">
  Link that uses a string.
</a>
`

This RouterLink example will direct the user to the component at /users/sammy.

The different URL segments can also be passed in an array like this:
`
<a [routerLink]="['/', 'users', 'sammy']">
  Link that uses an array.
</a>
`

above These two examples are formatted differently but will be directed to the same component at /users/sammy.


Using Router (imperative way)
----------------------------
There are two methods available on Angularâ€™s Router class to navigate imperatively in your component classes: Router.navigate and Router.navigateByUrl. Both methods return a promise that resolves to true if the navigation is successful, null if thereâ€™s no navigation, false if the navigation fails, or is completely rejected if thereâ€™s an error.

To use either method, youâ€™ll first want to make sure that the Router class is injected into your component class.
First, import Router into your component class:

Router.navigate
-------------
You pass in an array of URL segments to Router.navigate.
Hereâ€™s a basic example using the Router.navigate method:
`
goPlaces() {
  this.router.navigate(['/', 'users']);
}
`

And hereâ€™s an example demonstrating how Router.navigate is thenable:

`
goPlaces() {
  this.router.navigate(['/', 'users'])
    .then(nav => {
      console.log(nav); // true if navigation is successful
    }, err => {
      console.log(err) // when there's an error
    });
}`

If Router.navigate is successful in this example, it will display true. If Router.navigate is unsuccessful in this example, it will display an error.

Router.navigateByUrl
---------------------
Router.navigateByUrl is similar to Router.navigate, except that a string is passed in instead of URL segments. The navigation should be absolute and start with a /.
`
goPlaces() {
  this.router.navigateByUrl('/users;display=verbose/sammy');
}
`

In this example, Router.navigateByUrl will navigate to /users;display=verbose/sammy.


Hereâ€™s a basic example using the Router.navigateByUrl method:

Conclusion
In this article, you learned about navigation in Angular applications. You were introduced to RouterLink, Router.navigate, and Router.navigateByURL.


*/